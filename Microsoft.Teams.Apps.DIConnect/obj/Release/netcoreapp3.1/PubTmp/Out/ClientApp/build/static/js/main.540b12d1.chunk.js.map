{"version":3,"sources":["configVariables.ts","constants/constants.ts","components/config.tsx","i18n.ts","apis/axiosJWTDecorator.ts","apis/messageListApi.ts","actions/index.ts","components/OverFlow/sentMessageOverflow.tsx","components/Messages/messages.tsx","components/OverFlow/draftMessageOverflow.tsx","components/DraftMessages/draftMessages.tsx","components/TabContainer/tabContainer.tsx","components/AdaptiveCard/adaptiveCard.ts","utility/imageutility.tsx","components/NewMessage/newMessage.tsx","constants/groupType.ts","components/StatusTaskModule/statusTaskModule.tsx","components/SendConfirmationTaskModule/sendConfirmationTaskModule.tsx","components/ErrorPage/errorPage.tsx","components/SignInPage/signInPage.tsx","components/SignInPage/signInSimpleStart.tsx","apis/employeeResourceGroupApi.ts","components/NotificationMessage/notificationMessage.tsx","components/ConfigurationTab/configurationTab.tsx","components/SignInPage/signInSimpleEnd.tsx","components/JoinResourceGroup/card.tsx","components/checkboxWrapper.tsx","components/popup-menu/popupMenuCheckboxesContent.tsx","components/popup-menu/popupMenuWrapper.tsx","apis/appSettingsApi.ts","components/FilterBar/filterBar.tsx","components/JoinResourceGroup/discoverResourceGroups.tsx","components/EmployeeResourceGroup/createNewGroup.tsx","components/EmployeeResourceGroup/updateResouceGroup.tsx","apis/knowledgeBaseSettingsApi.ts","components/ConfigurationTab/updateKnowledgeBaseId.tsx","App.tsx","serviceWorker.ts","reducers/index.ts","index.tsx"],"names":["getBaseUrl","window","location","origin","Constants","stateTagMaxLength","stateTagMaxCount","stateLocationMaxLength","maxLengthName","maxLengthDescription","maxLengthKnowledgeBaseId","groupCreatedBotCommand","editTaskModuleHeight","editTaskModuleWidth","faqSettingsTaskModuleHeight","faqSettingsTaskModuleWidth","screenWidth","entityId","Configuration","props","localize","updateTabSettings","newProps","selectedIndex","setState","tabName","url","microsoftTeams","setValidityState","t","state","registerOnSaveHandler","saveEvent","setSettings","contentUrl","suggestedDisplayName","notifySuccess","className","List","selectable","onSelectedIndexChange","e","items","key","media","Image","src","avatar","content","Text","this","React","Component","withTranslation","i18n","use","Backend","initReactI18next","init","fallbackLng","interpolation","escapeValue","formatDate","date","moment","format","formatDuration","startDate","endDate","result","difference","diff","totalDuration","duration","Math","floor","asHours","slice","utc","asMilliseconds","locale","formatNumber","number","search","URLSearchParams","get","Number","toLocaleString","axiosJWTDecoratorInstance","handleError","needAuthorizationHeader","config","setupAuthorizationHeader","axios","data","patch","delete","post","put","error","hasOwnProperty","errorStatus","response","status","href","language","Promise","resolve","reject","authTokenRequest","successCallback","token","defaults","headers","failureCallback","console","resources","getAuthToken","baseAxiosUrl","getSentNotifications","a","getDraftNotifications","verifyGroupAccess","getGroups","id","searchGroups","query","exportNotification","getSentNotification","getDraftNotification","deleteDraftNotification","duplicateDraftNotification","sendDraftNotification","payload","updateDraftNotification","createDraftNotification","getTeams","getConsentSummaries","sendPreview","getAuthenticationConsentMetadata","windowLocationOriginDomain","login_hint","undefined","selectMessage","message","type","getMessagesList","dispatch","notificationList","forEach","notification","sendingStartedDate","sentDate","getDraftMessagesList","Overflow","onOpenTaskModule","event","title","taskInfo","height","width","fallbackUrl","startTask","err","duplicateDraftMessage","menuOpen","icon","MoreIcon","outline","active","indicator","menu","onClick","stopPropagation","then","onMenuOpenChange","Menu","iconOnly","styles","overflowWithTranslation","connect","messagesList","Messages","interval","isOpenTaskModuleAllowed","processLabels","Flex","vAlign","fill","gap","Item","size","variables","grow","truncated","weight","shrink","margin","renderSendingText","text","sentCount","succeeded","failed","unknown","totalMessageCount","messageContent","TooltipHost","calloutProps","gapSpace","AcceptIcon","xSpacing","CloseIcon","ExclamationCircleIcon","escFunction","keyCode","submitTask","loader","bind","document","addEventListener","setInterval","removeEventListener","clearInterval","nextProps","keyCount","label","outList","map","allMessages","Loader","length","messagesWithTranslation","deleteDraftMessage","teamsChannelId","teamsTeamId","context","teamId","channelId","draftNotificationId","catch","messages","draftMessagesList","selectedMessage","DraftMessages","initializeIcons","itemsAccount","align","allDraftMessages","draftMessagesWithTranslation","TabContainer","onNewMessage","panels","Button","primary","Accordion","defaultActiveIndex","tabContainerWithTranslation","getInitAdaptiveCard","setCardTitle","card","body","setCardImageLink","imageLink","setCardSummary","summary","setCardAuthor","author","setCardBtn","buttonTitle","buttonLink","actions","ImageUtil","makeInitialImage","name","canvas","createElement","style","display","appendChild","getContext","colorNum","ColorHash","hex","fillStyle","fillRect","font","split","len","first","initials","fillText","toUpperCase","toDataURL","removeChild","NewMessage","history","makeDropdownItems","resultedTeams","element","push","header","mail","image","team","makeDropdownItemList","fromItems","dropdownItemList","find","x","setDefaultCard","titleAsString","summaryAsString","authorAsString","buttonTitleAsString","imgUrl","getTeamList","teams","setGroupAccess","groupAccess","getGroupData","groups","getItem","draftMessageDetail","selectedRadioButton","rosters","allUsers","teamsOptionSelected","selectedTeamsNum","rostersOptionSelected","selectedRostersNum","groupsOptionSelected","selectedGroupsNum","selectedRadioBtn","selectedTeams","selectedRosters","selectedGroups","btnLink","btnTitle","allUsersOptionSelected","updateCard","onGroupSelected","value","isBtnDisabled","teamsSelectionIsValid","rostersSelectionIsValid","groupsSelectionIsValid","nothingSelected","isNextBtnDisabled","errorImageUrlMessage","errorButtonUrlMessage","getItems","remainingUserTeams","filter","findIndex","y","onTeamsChange","itemsData","MAX_SELECTED_TEAMS_NUM","onRostersChange","onGroupsChange","onGroupSearch","itemList","searchQuery","item","toLowerCase","indexOf","onGroupSearchQueryChange","noResultMessage","loading","encodeURIComponent","onSave","disableButton","selctedRosters","draftMessage","messageId","exists","editDraftMessage","postDraftMessage","onNext","page","onBack","onTitleChanged","showDefaultCard","target","onImageLinkChanged","startsWith","onSummaryChanged","onAuthorChanged","onBtnTitleChanged","onBtnLinkChanged","adaptiveCard","AdaptiveCards","parse","renderedCard","render","container","getElementsByClassName","firstChild","replaceWith","link","onExecuteAction","action","open","unstablePinned","params","match","placeholder","onChange","autoComplete","required","errorLabel","autoFocus","disabled","onSelected","Dropdown","multiple","unstable_pinned","noResultsMessage","loadingMessage","getGroupItems","onSearchQueryChange","space","ChevronStartIcon","secondary","onPublish","GroupType","MatchingFrequencyType","newMessageWithTranslation","StatusTaskModule","initMessage","sendingDuration","onClose","onExport","classList","remove","getItemList","renderAudienceSelection","teamNames","rosterNames","groupNames","renderErrorMessage","errorMessage","renderWarningMessage","warningMessage","canDownload","labelPosition","sendingCompleted","DownloadIcon","StatusTaskModuleWithTranslation","SendConfirmationTaskModule","onSendMessage","sort","sendConfirmationTaskModuleWithTranslation","ErrorPage","useTranslation","parseErrorMessage","SignInPage","authenticate","log","reason","SignInSimpleStart","useEffect","replace","upn","assign","getSearchableResourceGroupsAsync","createNewGroup","getTeamDetails","getEmployeeResourceGroup","getAllEmployeeResourceGroups","updateEmployeeResourceGroup","deleteEmployeeResourceGroup","NotificationMessage","showAlert","notificationStatus","PresenceAvailableIcon","color","BanIcon","ConfigurationTab","getResourceGroups","configurationContent","group","groupName","openEditTaskModule","groupId","groupDescription","Checkbox","toggle","checked","includeInSearchResults","onSearchEnableChange","MenuButton","trigger","EditIcon","TrashCanIcon","openDeleteDialog","isChecked","onDeleteHandleClick","submitEditHandler","onFaqSettingButtonClick","submiFaqtHandler","onUpdateGroupSubmit","alertMessage","alertStatus","setTimeout","hideAlert","theme","allGroups","Dialog","onConfirm","confirmButton","headerAction","closeOnOutsideClick","configurationTabWithTranslation","SignInSimpleEnd","hashParams","hash","substr","s","k","v","decodeURIComponent","getHashParameters","notifyFailure","Card","resourceGroupDetails","data-testid","column","groupLink","textDecoration","JSON","tags","index","trim","Label","circular","CheckboxWrapper","PopupMenuCheckboxesContent","checkboxes","filteredCheckboxes","setFilteredCheckboxes","disableClear","setDisableClear","checkBoxClicked","setCheckBoxClicked","Provider","hAlign","checkboxList","checkbox","onCheckboxStateChange","deSelectAll","Divider","checkboxLabel","checkCount","onCheckboxValueChange","PopupMenuWrapper","isOpen","popup","setPopup","Popup","position","onOpenChange","onFilterClick","iconPosition","ChevronDownIcon","trapFocus","getAppId","FilterBar","botId","getAppSetting","appId","resize","innerWidth","onLocationCheckboxStateChange","locationValues","locationsList","onTagsCheckboxStateChange","tagsValues","tagsList","onFilterButtonClick","isFilterEnabled","hideFilter","handleAddClick","completionBotId","submitHandler","AddIcon","hidden","Icon","iconName","Input","inverted","fluid","onSearchInputChange","commandBarSearchText","SearchIcon","DiscoverResourceGroups","discoverResourceGroupsAsync","resourceGroups","setFilterBarValues","onCreateGroupSubmit","locations","Array","tag","selectedCheckboxes","selectedLocations","postType","toString","selectedLocationsList","selectedTags","selectedTagsList","handleSearchInputChange","searchText","includes","some","cards","Col","lg","sm","md","Container","Row","EyeIcon","CreateNewGroup","userObjectId","handleSubmit","checkIfSubmitAllowed","submitLoading","groupDetails","groupType","selectedGroupType","external","teamName","teamDescription","teamLink","stringify","createNewEmployeeResourceGroup","isNullOrWhiteSpace","isGroupTypePresent","isGroupNamePresent","isGroupDescriptionPresent","isGroupLinkPresent","isTeamLinkPresent","isTeamNamePresent","isTeamDescriptionPresent","isImageLinkPresent","isLocationPresent","input","checkIfTagIsValid","validationParams","isEmpty","isLengthValid","isExisting","isTagsCountValid","containsSemicolon","isTagExist","tagValidation","onTagRemoveClick","splice","getTagError","onTagAddClick","tagList","onTagKeyUp","onTagChange","onGroupTypeChange","isTeamsSelected","isExternalSelected","onGroupNameChange","onGroupDescriptionChange","description","onGroupLinkChange","isGroupLinkValid","onTeamNameChange","onTeamDescriptionChange","onTeamLinkChange","isTeamLinkValid","onImageLinkChange","isImageLinkValid","onLocationChange","searchEnabled","getRequiredFieldError","isValuePresent","getInvalidUrlError","toBot","command","GroupId","maxLength","onKeyDown","InfoIcon","UpdateResouceGroup","getResourceGroup","profileMatchFrequency","isProfileMatchingEnabled","isFrequencyTypeMonthly","matchingFrequency","monthly","frequency","weekly","isNullorWhiteSpace","val","i","onFrequencyTypeChange","teamDisplayName","onProfileMatchEnableChange","aria-readonly","getKnowledgeBaseId","updateKnowledgeBaseId","UpdateKnowledgeBase","getKnowledgeBaseDetails","knowledgeBaseId","isKnowledgeBaseIdPresent","knowledgeBaseData","onKnowledgeBaseInputChange","updateKnowledgeBaseWithTranslation","App","setThemeComponent","themes","teamsDark","getAppDom","teamsHighContrast","updateTheme","themeStyle","ThemeStyle","Dark","HighContrast","Light","baseFontSize","fallback","exact","path","component","UpdateResourceGroup","updateKnowledgeBase","forceUpdate","changeLanguage","updateLocale","Boolean","hostname","combineReducers","draftMessages","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.540b12d1.chunk.js","sourcesContent":["export const getBaseUrl = (): string => {\r\n    return window.location.origin;\r\n}\r\n","// <copyright file=\"constants.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport default class Constants {\r\n    public static readonly stateTagMaxLength: number = 20;\r\n    public static readonly stateTagMaxCount: number = 3;\r\n    public static readonly stateLocationMaxLength: number = 100;\r\n    public static readonly maxLengthName: number = 100;\r\n    public static readonly maxLengthDescription: number = 300;\r\n    public static readonly maxLengthKnowledgeBaseId: number = 50;\r\n    public static readonly groupCreatedBotCommand: string = \"Group created\";\r\n    public static readonly editTaskModuleHeight: number = 800;\r\n    public static readonly editTaskModuleWidth: number = 600;\r\n    public static readonly faqSettingsTaskModuleHeight: number = 200;\r\n    public static readonly faqSettingsTaskModuleWidth: number = 350;\r\n\r\n    public static readonly screenWidth: number = 750;\r\n    //Constant for entity Id\r\n    public static readonly entityId: string = \"DI_connect_app\";\r\n}","// <copyright file=\"config.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Flex, Text, Image, List } from '@fluentui/react-northstar'\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport './config.scss';\r\nimport { getBaseUrl } from '../configVariables';\r\nimport Constants from \"../constants/constants\";\r\n\r\nexport interface IConfigState {\r\n    url: string;\r\n    tabName: string;\r\n}\r\n\r\nclass Configuration extends React.Component<WithTranslation, IConfigState> {\r\n    localize: TFunction;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            url: \"\",\r\n            tabName: \"\",\r\n        }\r\n    }\r\n\r\n    /**     \r\n     * Method to set selected tab name and url based on user's selection.\r\n     */\r\n    updateTabSettings = (newProps: any) => {\r\n        if (newProps.selectedIndex === 0) {\r\n            this.setState({\r\n                tabName: this.localize(\"CommunicationsTabName\"),\r\n                url: getBaseUrl() + \"/messages?locale={locale}\"\r\n            })\r\n            microsoftTeams.settings.setValidityState(true);\r\n        }\r\n        else if (newProps.selectedIndex === 1) {\r\n            this.setState({\r\n                tabName: this.localize(\"ConfigurationTabName\"),\r\n                url: getBaseUrl() + \"/configurationTab?locale={locale}\"\r\n            })\r\n            microsoftTeams.settings.setValidityState(true);\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.settings.registerOnSaveHandler((saveEvent) => {\r\n            microsoftTeams.settings.setSettings({\r\n                entityId: Constants.entityId,\r\n                contentUrl: this.state.url,\r\n                suggestedDisplayName: this.state.tabName,\r\n            });\r\n            saveEvent.notifySuccess();\r\n        });\r\n        microsoftTeams.settings.setValidityState(false);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"config-container\">\r\n                <List\r\n                    selectable\r\n                    onSelectedIndexChange={(e, newProps: any) => {\r\n                        this.updateTabSettings(newProps)\r\n                    }}\r\n                    items={[\r\n                        {\r\n                            key: 'communication',\r\n                            media: <Image className=\"img-container\" src={getBaseUrl() + \"/artifacts/color.png\"} avatar />,\r\n                            content: <Text className=\"text-container\" content={this.localize(\"CommunicationsTabOption\")} />,\r\n                        },\r\n                        {\r\n                            key: 'configuration',\r\n                            media: <Image className=\"img-container\" src={getBaseUrl() + \"/artifacts/color.png\"} avatar />,\r\n                            content: <Text className=\"text-container\" content={this.localize(\"ConfigurationTabOption\")} />,\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Configuration)","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport moment from 'moment';\r\nimport 'moment/min/locales.min';\r\n\r\nexport const defaultLocale = () => {\r\n    return 'en-US';\r\n} \r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n    fallbackLng: defaultLocale(),\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\nexport const updateLocale = () => {\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const locale = params.get(\"locale\") || defaultLocale();\r\n    i18n.changeLanguage(locale);\r\n    moment.locale(locale);\r\n};\r\n\r\nexport const formatDate = (date: string) => {\r\n    if (!date) return date;\r\n    return moment(date).format('l LT');\r\n}\r\n\r\nexport const formatDuration = (startDate: string, endDate: string) => {\r\n    let result = \"\";\r\n    if (startDate && endDate) {\r\n        const difference = moment(endDate).diff(moment(startDate));\r\n        const totalDuration = moment.duration(difference);\r\n        // Handling the scenario of duration being more than 24 hrs as it is not done by moment.js.\r\n        const hh = (\"0\" + Math.floor(totalDuration.asHours())).slice(-2);\r\n        result = hh + moment.utc(totalDuration.asMilliseconds()).locale(defaultLocale()).format(\":mm:ss\")\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const formatNumber = (number: any) => {\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const locale = params.get(\"locale\") || defaultLocale();\r\n    return Number(number).toLocaleString(locale);\r\n}\r\n\r\nexport default i18n;","import axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from '../i18n';\r\n\r\nexport class AxiosJWTDecorator {\r\n    public async get<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        handleError: boolean = true,\r\n        needAuthorizationHeader: boolean = true,\r\n        config?: AxiosRequestConfig,\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async patch<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.patch(url, data, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async delete<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.delete(url, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async post<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.post(url, data, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async put<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.put(url, data, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n  private handleError(error: any): void {\r\n    if (error.hasOwnProperty(\"response\")) {\r\n      const errorStatus = error.response.status;\r\n      if (errorStatus === 403) {\r\n        window.location.href = `/errorpage/403?locale=${i18n.language}`;\r\n      } else if (errorStatus === 401) {\r\n        window.location.href = `/errorpage/401?locale=${i18n.language}`;\r\n      } else {\r\n        window.location.href = `/errorpage?locale=${i18n.language}`;\r\n      }\r\n    } else {\r\n      window.location.href = `/errorpage?locale=${i18n.language}`;\r\n    }\r\n  }\r\n\r\n    private async setupAuthorizationHeader(\r\n        config?: AxiosRequestConfig\r\n    ): Promise<AxiosRequestConfig> {\r\n        microsoftTeams.initialize();\r\n\r\n    return new Promise<AxiosRequestConfig>((resolve, reject) => {\r\n      const authTokenRequest = {\r\n        successCallback: (token: string) => {\r\n          if (!config) {\r\n            config = axios.defaults;\r\n          }\r\n          config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n          config.headers[\"Accept-Language\"] = i18n.language;\r\n          resolve(config);\r\n        },\r\n        failureCallback: (error: string) => {\r\n          // When the getAuthToken function returns a \"resourceRequiresConsent\" error, \r\n          // it means Azure AD needs the user's consent before issuing a token to the app. \r\n          // The following code redirects the user to the \"Sign in\" page where the user can grant the consent. \r\n          // Right now, the app redirects to the consent page for any error.\r\n          console.error(\"Error from getAuthToken: \", error);\r\n          window.location.href = `/signin?locale=${i18n.language}`;\r\n        },\r\n        resources: []\r\n      };\r\n      microsoftTeams.authentication.getAuthToken(authTokenRequest);\r\n    });\r\n  }\r\n}\r\n\r\nconst axiosJWTDecoratorInstance = new AxiosJWTDecorator();\r\nexport default axiosJWTDecoratorInstance;","// <copyright file=\"messsageListApi.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from './axiosJWTDecorator';\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nlet baseAxiosUrl = getBaseUrl() + '/api';\r\n\r\nexport const getSentNotifications = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getDraftNotifications = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const verifyGroupAccess = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/verifyaccess\";\r\n    return await axios.get(url, false);\r\n}\r\n\r\nexport const getGroups = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const searchGroups = async (query: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/search/\" + query;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const exportNotification = async (id: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/exportnotification/\" + id;\r\n    return await axios.put(url,null,false);\r\n}\r\n\r\nexport const getSentNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\n\r\nexport const deleteDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/\" + id;\r\n    return await axios.delete(url);\r\n}\r\n\r\nexport const duplicateDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/duplicates/\" + id;\r\n    return await axios.post(url);\r\n}\r\n\r\nexport const sendDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const updateDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.put(url, payload);\r\n}\r\n\r\nexport const createDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const getTeams = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/teamdata\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getConsentSummaries = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/consentSummaries/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const sendPreview = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/previews\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const getAuthenticationConsentMetadata = async (windowLocationOriginDomain: string, login_hint: string): Promise<any> => {\r\n    let url = `${baseAxiosUrl}/authenticationMetadata/consentUrl?windowLocationOriginDomain=${windowLocationOriginDomain}&loginhint=${login_hint}`;\r\n    return await axios.get(url, undefined, false);\r\n}\r\n","import { formatDate } from '../i18n';\r\nimport { getSentNotifications, getDraftNotifications } from '../apis/messageListApi';\r\n\r\ntype Notification = {\r\n    createdDateTime: string,\r\n    failed: number,\r\n    id: string,\r\n    isCompleted: boolean,\r\n    sentDate: string,\r\n    sendingStartedDate: string,\r\n    sendingDuration: string,\r\n    succeeded: number,\r\n    throttled: number,\r\n    title: string,\r\n    totalMessageCount: number,\r\n}\r\n\r\nexport const selectMessage = (message: any) => {\r\n    return {\r\n        type: 'MESSAGE_SELECTED',\r\n        payload: message\r\n    };\r\n};\r\n\r\nexport const getMessagesList = () => async (dispatch: any) => {\r\n    const response = await getSentNotifications();\r\n    const notificationList: Notification[] = response.data;\r\n    notificationList.forEach(notification => {\r\n        notification.sendingStartedDate = formatDate(notification.sendingStartedDate);\r\n        notification.sentDate = formatDate(notification.sentDate);\r\n    });\r\n    dispatch({ type: 'FETCH_MESSAGES', payload: notificationList });\r\n};\r\n\r\nexport const getDraftMessagesList = () => async (dispatch: any) => {\r\n    const response = await getDraftNotifications();\r\n    dispatch({ type: 'FETCH_DRAFTMESSAGES', payload: response.data });\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Menu, MoreIcon } from '@fluentui/react-northstar';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { duplicateDraftNotification } from '../../apis/messageListApi';\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface OverflowProps extends WithTranslation {\r\n    message?: any;\r\n    styles?: object;\r\n    title?: string;\r\n    selectMessage?: any;\r\n    getMessagesList?: any;\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface OverflowState {\r\n    menuOpen: boolean;\r\n}\r\n\r\nexport interface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nclass Overflow extends React.Component<OverflowProps, OverflowState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: OverflowProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            menuOpen: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const items = [\r\n            {\r\n                key: 'more',\r\n                icon: <MoreIcon outline={true} />,\r\n                menuOpen: this.state.menuOpen,\r\n                active: this.state.menuOpen,\r\n                indicator: false,\r\n                menu: {\r\n                    items: [\r\n                        {\r\n                            key: 'status',\r\n                            content: this.localize(\"ViewStatus\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/viewstatus/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"ViewStatus\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicate',\r\n                            content: this.localize(\"Duplicate\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.duplicateDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                    ],\r\n                },\r\n                onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n                    this.setState({\r\n                        menuOpen: !this.state.menuOpen\r\n                    });\r\n                },\r\n            },\r\n        ];\r\n\r\n        return <Menu className=\"menuContainer\" iconOnly items={items} styles={this.props.styles} title={this.props.title} />;\r\n    }\r\n\r\n    private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: url,\r\n            title: title,\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: url,\r\n        };\r\n        let submitHandler = (err: any, result: any) => {\r\n        };\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n\r\n    private duplicateDraftMessage = async (id: number) => {\r\n        try {\r\n            await duplicateDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messagesList: state.messagesList };\r\n}\r\n\r\nconst overflowWithTranslation = withTranslation()(Overflow);\r\nexport default connect(mapStateToProps, { selectMessage, getMessagesList, getDraftMessagesList })(overflowWithTranslation);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { TooltipHost } from 'office-ui-fabric-react';\r\nimport { Loader, List, Flex, Text, AcceptIcon, CloseIcon, ExclamationCircleIcon } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport Overflow from '../OverFlow/sentMessageOverflow';\r\nimport './messages.scss';\r\nimport { TFunction } from \"i18next\";\r\nimport { formatNumber } from '../../i18n';\r\n\r\nexport interface ITaskInfo {\r\n  title?: string;\r\n  height?: number;\r\n  width?: number;\r\n  url?: string;\r\n  card?: string;\r\n  fallbackUrl?: string;\r\n  completionBotId?: string;\r\n}\r\n\r\nexport interface IMessage {\r\n  title: string;\r\n  sentDate: string;\r\n  recipients: string;\r\n  acknowledgements?: string;\r\n  reactions?: string;\r\n  responses?: string;\r\n}\r\n\r\nexport interface IMessageProps extends WithTranslation {\r\n  messagesList: IMessage[];\r\n  selectMessage?: any;\r\n  getMessagesList?: any;\r\n  getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface IMessageState {\r\n  message: IMessage[];\r\n  loader: boolean;\r\n}\r\n\r\nclass Messages extends React.Component<IMessageProps, IMessageState> {\r\n  readonly localize: TFunction;\r\n  private interval: any;\r\n  private isOpenTaskModuleAllowed: boolean;\r\n  constructor(props: IMessageProps) {\r\n    super(props);\r\n    this.localize = this.props.t;\r\n    this.isOpenTaskModuleAllowed = true;\r\n    this.state = {\r\n      message: this.props.messagesList,\r\n      loader: true,\r\n    };\r\n    this.escFunction = this.escFunction.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    this.props.getMessagesList();\r\n    document.addEventListener(\"keydown\", this.escFunction, false);\r\n    this.interval = setInterval(() => {\r\n      this.props.getMessagesList();\r\n    }, 60000);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: any) {\r\n    if (this.props !== nextProps) {\r\n      this.setState({\r\n        message: nextProps.messagesList,\r\n        loader: false\r\n      });\r\n    }\r\n  }\r\n\r\n    public render(): JSX.Element {\r\n    let keyCount = 0;\r\n      const processItem = (message: any) => {\r\n      keyCount++;\r\n      const out = {\r\n        key: keyCount,\r\n        content: this.messageContent(message),\r\n        onClick: (): void => {\r\n            let url = getBaseUrl() + \"/viewstatus/\" + message.id + \"?locale={locale}\";\r\n            this.onOpenTaskModule(null, url, this.localize(\"ViewStatus\"));\r\n        },\r\n        styles: { margin: '0.2rem 0.2rem 0 0' },\r\n      };\r\n      return out;\r\n    };\r\n\r\n    const label = this.processLabels();\r\n    const outList = this.state.message.map(processItem);\r\n    const allMessages = [...label, ...outList];\r\n\r\n    if (this.state.loader) {\r\n      return (\r\n        <Loader />\r\n      );\r\n    } else if (this.state.message.length === 0) {\r\n        return (<div className=\"results\">{this.localize(\"EmptySentMessages\")}</div>);\r\n    }\r\n    else {\r\n        return (\r\n            <List selectable items={allMessages} className=\"list\" />\r\n      );\r\n    }\r\n  }\r\n\r\n  private processLabels = () => {\r\n    const out = [{\r\n      key: \"labels\",\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} grow={1} >\r\n            <Text\r\n              truncated\r\n              weight=\"bold\"\r\n              content={this.localize(\"TitleText\")}\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }}>\r\n            <Text></Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} shrink={false}>\r\n            <Text\r\n              truncated\r\n              content={this.localize(\"Recipients\")}\r\n              weight=\"bold\"\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} >\r\n            <Text\r\n              truncated\r\n              content={this.localize(\"Sent\")}\r\n              weight=\"bold\"\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item shrink={0} >\r\n            <Overflow title=\"\" />\r\n          </Flex.Item>\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '0.2rem 0.2rem 0 0' },\r\n    }];\r\n    return out;\r\n  }\r\n\r\n  private renderSendingText = (message: any) => {\r\n    var text = \"\";\r\n    switch (message.status) {\r\n        case \"Queued\":\r\n            text = this.localize(\"Queued\");\r\n            break;\r\n        case \"SyncingRecipients\":\r\n            text = this.localize(\"SyncingRecipients\");\r\n            break;\r\n        case \"InstallingApp\":\r\n            text = this.localize(\"InstallingApp\");\r\n            break;\r\n        case \"Sending\":\r\n            let sentCount =\r\n                (message.succeeded ? message.succeeded : 0) +\r\n                (message.failed ? message.failed : 0) +\r\n                (message.unknown ? message.unknown : 0);\r\n\r\n            text = this.localize(\"SendingMessages\", { \"SentCount\": formatNumber(sentCount), \"TotalCount\": formatNumber(message.totalMessageCount) });\r\n            break;\r\n        case \"Sent\":\r\n        case \"Failed\":\r\n            text = \"\";\r\n    }\r\n\r\n    return (<Text truncated content={text} />);\r\n  }\r\n\r\n  private messageContent = (message: any) => {\r\n    return (\r\n      <Flex className=\"listContainer\" vAlign=\"center\" fill gap=\"gap.small\">\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} grow={1}>\r\n          <Text\r\n            truncated\r\n            content={message.title}\r\n          >\r\n          </Text>\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }}>\r\n          {this.renderSendingText(message)}\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} shrink={false}>\r\n            <div>\r\n                <TooltipHost content={this.props.t(\"TooltipSuccess\")} calloutProps={{ gapSpace: 0 }}>\r\n                    <AcceptIcon xSpacing=\"after\" className=\"succeeded\" outline  />\r\n                    <span className=\"semiBold\">{formatNumber(message.succeeded)}</span>\r\n                </TooltipHost>\r\n                    <TooltipHost content={this.props.t(\"TooltipFailure\")} calloutProps={{ gapSpace: 0 }}>\r\n                    <CloseIcon xSpacing=\"both\" className=\"failed\" outline />\r\n                        <span className=\"semiBold\">{formatNumber(message.failed)}</span>\r\n                    </TooltipHost>\r\n                    {\r\n                        message.unknown &&\r\n                        <TooltipHost content=\"Unknown\" calloutProps={{ gapSpace: 0 }}>\r\n                            <ExclamationCircleIcon xSpacing=\"both\" className=\"unknown\" outline />\r\n                            <span className=\"semiBold\">{formatNumber(message.unknown)}</span>\r\n                        </TooltipHost>\r\n                    }\r\n            </div>\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} >\r\n          <Text\r\n            truncated\r\n            className=\"semiBold\"\r\n            content={message.sentDate}\r\n          />\r\n        </Flex.Item>\r\n        <Flex.Item shrink={0}>\r\n          <Overflow message={message} title=\"\" />\r\n        </Flex.Item>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  private escFunction = (event: any) => {\r\n    if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n      microsoftTeams.tasks.submitTask();\r\n    }\r\n  }\r\n\r\n  public onOpenTaskModule = (event: any, url: string, title: string) => {\r\n    if (this.isOpenTaskModuleAllowed) {\r\n      this.isOpenTaskModuleAllowed = false;\r\n      let taskInfo: ITaskInfo = {\r\n        url: url,\r\n        title: title,\r\n        height: 530,\r\n        width: 1000,\r\n        fallbackUrl: url,\r\n      }\r\n\r\n      let submitHandler = (err: any, result: any) => {\r\n        this.isOpenTaskModuleAllowed = true;\r\n      };\r\n\r\n      microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return { messagesList: state.messagesList };\r\n}\r\n\r\nconst messagesWithTranslation = withTranslation()(Messages);\r\nexport default connect(mapStateToProps, { selectMessage, getMessagesList, getDraftMessagesList })(messagesWithTranslation);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Menu, MoreIcon } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { deleteDraftNotification, duplicateDraftNotification, sendPreview } from '../../apis/messageListApi';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface OverflowProps extends WithTranslation {\r\n    message: any;\r\n    styles?: object;\r\n    title?: string;\r\n    selectMessage?: any;\r\n    getMessagesList?: any;\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface OverflowState {\r\n    teamsTeamId?: string;\r\n    teamsChannelId?: string;\r\n    menuOpen: boolean;\r\n}\r\n\r\nexport interface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nclass Overflow extends React.Component<OverflowProps, OverflowState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: OverflowProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            teamsChannelId: '',\r\n            teamsTeamId: '',\r\n            menuOpen: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.setState({\r\n                teamsTeamId: context.teamId,\r\n                teamsChannelId: context.channelId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const items = [\r\n            {\r\n                key: 'more',\r\n                icon: <MoreIcon outline={true} />,\r\n                menuOpen: this.state.menuOpen,\r\n                active: this.state.menuOpen,\r\n                indicator: false,\r\n                menu: {\r\n                    items: [\r\n                        {\r\n                            key: 'send',\r\n                            content: this.localize(\"Send\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/sendconfirmation/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"SendConfirmation\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'preview',\r\n                            content: this.localize(\"PreviewInThisChannel\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let payload = {\r\n                                    draftNotificationId: this.props.message.id,\r\n                                    teamsTeamId: this.state.teamsTeamId,\r\n                                    teamsChannelId: this.state.teamsChannelId,\r\n                                }\r\n                                sendPreview(payload).then((response) => {\r\n                                    return response.status;\r\n                                }).catch((error) => {\r\n                                    return error;\r\n                                });\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'edit',\r\n                            content: this.localize(\"Edit\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/newmessage/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"EditMessage\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicate',\r\n                            content: this.localize(\"Duplicate\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.duplicateDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'delete',\r\n                            content: this.localize(\"Delete\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.deleteDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                    ],\r\n                },\r\n                onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n                    this.setState({\r\n                        menuOpen: !this.state.menuOpen\r\n                    });\r\n                },\r\n            },\r\n        ];\r\n\r\n        return <Menu className=\"menuContainer\" iconOnly items={items} styles={this.props.styles} title={this.props.title} />;\r\n    }\r\n\r\n    private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: url,\r\n            title: title,\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: url,\r\n        };\r\n\r\n        let submitHandler = (err: any, result: any) => {\r\n            this.props.getDraftMessagesList().then(() => {\r\n                this.props.getMessagesList();\r\n            });\r\n        };\r\n\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n\r\n    private duplicateDraftMessage = async (id: number) => {\r\n        try {\r\n            await duplicateDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private deleteDraftMessage = async (id: number) => {\r\n        try {\r\n            await deleteDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messages: state.draftMessagesList, selectedMessage: state.selectedMessage };\r\n}\r\n\r\nconst overflowWithTranslation = withTranslation()(Overflow);\r\nexport default connect(mapStateToProps, { selectMessage, getDraftMessagesList, getMessagesList })(overflowWithTranslation);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { Loader, List, Flex, Text } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './draftMessages.scss';\r\nimport { selectMessage, getDraftMessagesList, getMessagesList } from '../../actions';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport Overflow from '../OverFlow/draftMessageOverflow';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface ITaskInfo {\r\n  title?: string;\r\n  height?: number;\r\n  width?: number;\r\n  url?: string;\r\n  card?: string;\r\n  fallbackUrl?: string;\r\n  completionBotId?: string;\r\n}\r\n\r\nexport interface IMessage {\r\n  id: string;\r\n  title: string;\r\n  date: string;\r\n  recipients: string;\r\n  acknowledgements?: string;\r\n  reactions?: string;\r\n  responses?: string;\r\n}\r\n\r\nexport interface IMessageProps extends WithTranslation {\r\n  messages: IMessage[];\r\n  selectedMessage: any;\r\n  selectMessage?: any;\r\n  getDraftMessagesList?: any;\r\n  getMessagesList?: any;\r\n}\r\n\r\nexport interface IMessageState {\r\n  message: IMessage[];\r\n  itemsAccount: number;\r\n  loader: boolean;\r\n  teamsTeamId?: string;\r\n  teamsChannelId?: string;\r\n}\r\n\r\nclass DraftMessages extends React.Component<IMessageProps, IMessageState> {\r\n  readonly localize: TFunction;\r\n  private interval: any;\r\n  private isOpenTaskModuleAllowed: boolean;\r\n\r\n  constructor(props: IMessageProps) {\r\n    super(props);\r\n    initializeIcons();\r\n    this.localize = this.props.t;\r\n    this.isOpenTaskModuleAllowed = true;\r\n    this.state = {\r\n      message: props.messages,\r\n      itemsAccount: this.props.messages.length,\r\n      loader: true,\r\n      teamsTeamId: \"\",\r\n      teamsChannelId: \"\",\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.getContext((context) => {\r\n      this.setState({\r\n        teamsTeamId: context.teamId,\r\n        teamsChannelId: context.channelId,\r\n      });\r\n    });\r\n    this.props.getDraftMessagesList();\r\n    this.interval = setInterval(() => {\r\n      this.props.getDraftMessagesList();\r\n    }, 60000);\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: any) {\r\n    this.setState({\r\n      message: nextProps.messages,\r\n      loader: false\r\n    })\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let keyCount = 0;\r\n    const processItem = (message: any) => {\r\n      keyCount++;\r\n      const out = {\r\n        key: keyCount,\r\n        content: (\r\n          <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n            <Flex.Item shrink={0} grow={1}>\r\n              <Text>{message.title}</Text>\r\n                </Flex.Item>\r\n                <Flex.Item shrink={0} align=\"end\">\r\n              <Overflow message={message} title=\"\" />\r\n            </Flex.Item>\r\n          </Flex>\r\n        ),\r\n        styles: { margin: '0.2rem 0.2rem 0 0' },\r\n        onClick: (): void => {\r\n            let url = getBaseUrl() + \"/newmessage/\" + message.id + \"?locale={locale}\";\r\n            this.onOpenTaskModule(null, url, this.localize(\"EditMessage\"));\r\n        },\r\n      };\r\n      return out;\r\n    };\r\n\r\n    const label = this.processLabels();\r\n    const outList = this.state.message.map(processItem);\r\n    const allDraftMessages = [...label, ...outList];\r\n\r\n    if (this.state.loader) {\r\n      return (\r\n        <Loader />\r\n      );\r\n    } else if (this.state.message.length === 0) {\r\n        return (<div className=\"results\">{this.localize(\"EmptyDraftMessages\")}</div>);\r\n    }\r\n    else {\r\n      return (\r\n        <List selectable items={allDraftMessages} className=\"list\" />\r\n      );\r\n    }\r\n  }\r\n\r\n  private processLabels = () => {\r\n    const out = [{\r\n      key: \"labels\",\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <Text\r\n              truncated\r\n              weight=\"bold\"\r\n              content={this.localize(\"TitleText\")}\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '0.2rem 0.2rem 0 0' },\r\n    }];\r\n    return out;\r\n  }\r\n\r\n  private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n    if (this.isOpenTaskModuleAllowed) {\r\n      this.isOpenTaskModuleAllowed = false;\r\n      let taskInfo: ITaskInfo = {\r\n        url: url,\r\n        title: title,\r\n        height: 530,\r\n        width: 1000,\r\n        fallbackUrl: url,\r\n      }\r\n\r\n      let submitHandler = (err: any, result: any) => {\r\n        this.props.getDraftMessagesList().then(() => {\r\n          this.props.getMessagesList();\r\n          this.isOpenTaskModuleAllowed = true;\r\n        });\r\n      };\r\n\r\n      microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return { messages: state.draftMessagesList, selectedMessage: state.selectedMessage };\r\n}\r\n\r\nconst draftMessagesWithTranslation = withTranslation()(DraftMessages);\r\nexport default connect(mapStateToProps, { selectMessage, getDraftMessagesList, getMessagesList })(draftMessagesWithTranslation);","import * as React from 'react';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport Messages from '../Messages/messages';\r\nimport DraftMessages from '../DraftMessages/draftMessages';\r\nimport './tabContainer.scss';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { Accordion, Button } from '@fluentui/react-northstar';\r\nimport { getDraftMessagesList } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport { TFunction } from \"i18next\";\r\n\r\ninterface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nexport interface ITaskInfoProps extends WithTranslation {\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface ITabContainerState {\r\n    url: string;\r\n}\r\n\r\nclass TabContainer extends React.Component<ITaskInfoProps, ITabContainerState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: ITaskInfoProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            url: getBaseUrl() + \"/newmessage?locale={locale}\"\r\n        }\r\n        this.escFunction = this.escFunction.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        //- Handle the Esc key\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public escFunction(event: any) {\r\n        if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n            microsoftTeams.tasks.submitTask();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const panels = [\r\n            {\r\n                title: this.localize('DraftMessagesSectionTitle'),\r\n                content: {\r\n                    key: 'sent',\r\n                    content: (\r\n                        <div className=\"messages\">\r\n                            <DraftMessages></DraftMessages>\r\n                        </div>\r\n                    ),\r\n                },\r\n            },\r\n            {\r\n                title: this.localize('SentMessagesSectionTitle'),\r\n                content: {\r\n                    key: 'draft',\r\n                    content: (\r\n                        <div className=\"messages\">\r\n                            <Messages></Messages>\r\n                        </div>\r\n                    ),\r\n                },\r\n            }\r\n        ]\r\n        return (\r\n            <div className=\"tabContainer\">\r\n                <div className=\"newPostBtn\">\r\n                    <Button content={this.localize(\"NewMessage\")} onClick={this.onNewMessage} primary />\r\n                </div>\r\n                <div className=\"messageContainer\">\r\n                    <Accordion defaultActiveIndex={[0, 1]} panels={panels} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onNewMessage = () => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: this.state.url,\r\n            title: this.localize(\"NewCommunicationCardTitle\"),\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: this.state.url,\r\n        }\r\n\r\n        let submitHandler = (err: any, result: any) => {\r\n            this.props.getDraftMessagesList();\r\n        };\r\n\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messages: state.draftMessagesList };\r\n}\r\n\r\nconst tabContainerWithTranslation = withTranslation()(TabContainer);\r\nexport default connect(mapStateToProps, { getDraftMessagesList })(tabContainerWithTranslation);","import { TFunction } from \"i18next\";\r\n\r\nexport const getInitAdaptiveCard = (t: TFunction) => {\r\n    const titleTextAsString = t(\"TitleText\");\r\n    return (\r\n        {\r\n            \"type\": \"AdaptiveCard\",\r\n            \"body\": [\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"weight\": \"Bolder\",\r\n                    \"text\": titleTextAsString,\r\n                    \"size\": \"ExtraLarge\",\r\n                    \"wrap\": true\r\n                },\r\n                {\r\n                    \"type\": \"Image\",\r\n                    \"spacing\": \"Default\",\r\n                    \"url\": \"\",\r\n                    \"size\": \"Stretch\",\r\n                    \"width\": \"400px\",\r\n                    \"altText\": \"\"\r\n                },\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"text\": \"\",\r\n                    \"wrap\": true\r\n                },\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"wrap\": true,\r\n                    \"size\": \"Small\",\r\n                    \"weight\": \"Lighter\",\r\n                    \"text\": \"\"\r\n                }\r\n            ],\r\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\r\n            \"version\": \"1.0\"\r\n        }\r\n    );\r\n}\r\n\r\nexport const getCardTitle = (card: any) => {\r\n    return card.body[0].text;\r\n}\r\n\r\nexport const setCardTitle = (card: any, title: string) => {\r\n    card.body[0].text = title;\r\n}\r\n\r\nexport const getCardImageLink = (card: any) => {\r\n    return card.body[1].url;\r\n}\r\n\r\nexport const setCardImageLink = (card: any, imageLink?: string) => {\r\n    card.body[1].url = imageLink;\r\n}\r\n\r\nexport const getCardSummary = (card: any) => {\r\n    return card.body[2].text;\r\n}\r\n\r\nexport const setCardSummary = (card: any, summary?: string) => {\r\n    card.body[2].text = summary;\r\n}\r\n\r\nexport const getCardAuthor = (card: any) => {\r\n    return card.body[3].text;\r\n}\r\n\r\nexport const setCardAuthor = (card: any, author?: string) => {\r\n    card.body[3].text = author;\r\n}\r\n\r\nexport const getCardBtnTitle = (card: any) => {\r\n    return card.actions[0].title;\r\n}\r\n\r\nexport const getCardBtnLink = (card: any) => {\r\n    return card.actions[0].url;\r\n}\r\n\r\nexport const setCardBtn = (card: any, buttonTitle?: string, buttonLink?: string) => {\r\n    if (buttonTitle && buttonLink) {\r\n        card.actions = [\r\n            {\r\n                \"type\": \"Action.OpenUrl\",\r\n                \"title\": buttonTitle,\r\n                \"url\": buttonLink\r\n            }\r\n        ];\r\n    } else {\r\n        delete card.actions;\r\n    }\r\n}\r\n","import ColorHash from \"color-hash\";\r\n\r\nexport class ImageUtil {\r\n\r\n    public static makeInitialImage = (name: string) => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.style.display = 'none';\r\n        canvas.width = 32;\r\n        canvas.height = 32;\r\n        document.body.appendChild(canvas);\r\n        const context = canvas.getContext('2d');\r\n        if (context) {\r\n            let colorHash = new ColorHash();\r\n            const colorNum = colorHash.hex(name);\r\n            context.fillStyle = colorNum;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            context.font = \"16px Arial\";\r\n            context.fillStyle = \"#fff\";\r\n            const split = name.split(' ');\r\n            const len = split.length;\r\n            const first = split[0][0];\r\n            if (len > 1) {\r\n                const last = split[len - 1][0];\r\n                const initials = first + last;\r\n                context.fillText(initials.toUpperCase(), 3, 23);\r\n            } else {\r\n                context.fillText(first.toUpperCase(), 10, 23);\r\n            }\r\n            const data = canvas.toDataURL();\r\n            document.body.removeChild(canvas);\r\n            return data;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Input, TextArea, Radiobutton, RadiobuttonGroup } from 'msteams-ui-components-react';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { Button, Loader, Dropdown, Text, Flex, ChevronStartIcon } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './newMessage.scss';\r\nimport './teamTheme.scss';\r\nimport { getDraftNotification, getTeams, createDraftNotification, updateDraftNotification, searchGroups, getGroups, verifyGroupAccess } from '../../apis/messageListApi';\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { TFunction } from \"i18next\";\r\n\r\ntype dropdownItem = {\r\n    key: string,\r\n    header: string,\r\n    content: string,\r\n    image: string,\r\n    team: {\r\n        id: string,\r\n    },\r\n}\r\n\r\nexport interface IDraftMessage {\r\n    id?: string,\r\n    title: string,\r\n    imageLink?: string,\r\n    summary?: string,\r\n    author: string,\r\n    buttonTitle?: string,\r\n    buttonLink?: string,\r\n    teams: any[],\r\n    rosters: any[],\r\n    groups: any[],\r\n    allUsers: boolean\r\n}\r\n\r\nexport interface formState {\r\n    title: string,\r\n    summary?: string,\r\n    btnLink?: string,\r\n    imageLink?: string,\r\n    btnTitle?: string,\r\n    author: string,\r\n    card?: any,\r\n    page: string,\r\n    teamsOptionSelected: boolean,\r\n    rostersOptionSelected: boolean,\r\n    allUsersOptionSelected: boolean,\r\n    groupsOptionSelected: boolean,\r\n    teams?: any[],\r\n    groups?: any[],\r\n    exists?: boolean,\r\n    messageId: string,\r\n    loader: boolean,\r\n    groupAccess: boolean,\r\n    loading: boolean,\r\n    disableButton: boolean,\r\n    noResultMessage: string,\r\n    unstablePinned?: boolean,\r\n    selectedTeamsNum: number,\r\n    selectedRostersNum: number,\r\n    selectedGroupsNum: number,\r\n    selectedRadioBtn: string,\r\n    selectedTeams: dropdownItem[],\r\n    selectedRosters: dropdownItem[],\r\n    selectedGroups: dropdownItem[],\r\n    errorImageUrlMessage: string,\r\n    errorButtonUrlMessage: string,\r\n}\r\n\r\nexport interface INewMessageProps extends RouteComponentProps, WithTranslation {\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nclass NewMessage extends React.Component<INewMessageProps, formState> {\r\n    readonly localize: TFunction;\r\n    private card: any;\r\n    history: any;\r\n\r\n    constructor(props: INewMessageProps) {\r\n        super(props);\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.card = getInitAdaptiveCard(this.localize);\r\n        this.setDefaultCard(this.card);\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            summary: \"\",\r\n            author: \"\",\r\n            btnLink: \"\",\r\n            imageLink: \"\",\r\n            btnTitle: \"\",\r\n            card: this.card,\r\n            page: \"CardCreation\",\r\n            teamsOptionSelected: true,\r\n            rostersOptionSelected: false,\r\n            allUsersOptionSelected: false,\r\n            groupsOptionSelected: false,\r\n            messageId: \"\",\r\n            loader: true,\r\n            groupAccess: false,\r\n            loading: false,\r\n            disableButton: false,\r\n            noResultMessage: \"\",\r\n            unstablePinned: true,\r\n            selectedTeamsNum: 0,\r\n            selectedRostersNum: 0,\r\n            selectedGroupsNum: 0,\r\n            selectedRadioBtn: \"teams\",\r\n            selectedTeams: [],\r\n            selectedRosters: [],\r\n            selectedGroups: [],\r\n            errorImageUrlMessage: \"\",\r\n            errorButtonUrlMessage: \"\",\r\n        }\r\n\r\n        this.history = props.history;\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        //- Handle the Esc key\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        let params = this.props.match.params;\r\n        this.setGroupAccess();\r\n        this.getTeamList().then(() => {\r\n            if ('id' in params) {\r\n                let id = params['id'];\r\n                this.getItem(id).then(() => {\r\n                    const selectedTeams = this.makeDropdownItemList(this.state.selectedTeams, this.state.teams);\r\n                    const selectedRosters = this.makeDropdownItemList(this.state.selectedRosters, this.state.teams);\r\n                    this.setState({\r\n                        exists: true,\r\n                        messageId: id,\r\n                        selectedTeams: selectedTeams,\r\n                        selectedRosters: selectedRosters,\r\n                    })\r\n                });\r\n                this.getGroupData(id).then(() => {\r\n                    const selectedGroups = this.makeDropdownItems(this.state.groups);\r\n                    this.setState({\r\n                        selectedGroups: selectedGroups\r\n                    })\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    exists: false,\r\n                    loader: false\r\n                }, () => {\r\n                    let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                    adaptiveCard.parse(this.state.card);\r\n                    let renderedCard = adaptiveCard.render();\r\n                    document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                    if (this.state.btnLink) {\r\n                        let link = this.state.btnLink;\r\n                        adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); };\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    private makeDropdownItems = (items: any[] | undefined) => {\r\n        const resultedTeams: dropdownItem[] = [];\r\n        if (items) {\r\n            items.map((element) => {\r\n                resultedTeams.push({\r\n                    key: element.id,\r\n                    header: element.name,\r\n                    content: element.mail,\r\n                    image: ImageUtil.makeInitialImage(element.name),\r\n                    team: {\r\n                        id: element.id\r\n                    },\r\n\r\n                });\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private makeDropdownItemList = (items: any[], fromItems: any[] | undefined) => {\r\n        const dropdownItemList: dropdownItem[] = [];\r\n        items.map(element =>\r\n            dropdownItemList.push(\r\n                typeof element !== \"string\" ? element : {\r\n                    key: fromItems!.find(x => x.id === element).id,\r\n                    header: fromItems!.find(x => x.id === element).name,\r\n                    image: ImageUtil.makeInitialImage(fromItems!.find(x => x.id === element).name),\r\n                    team: {\r\n                        id: element\r\n                    }\r\n                })\r\n        );\r\n        return dropdownItemList;\r\n    }\r\n\r\n    public setDefaultCard = (card: any) => {\r\n        const titleAsString = this.localize(\"TitleText\");\r\n        const summaryAsString = this.localize(\"Summary\");\r\n        const authorAsString = this.localize(\"Author1\");\r\n        const buttonTitleAsString = this.localize(\"ButtonTitle\");\r\n\r\n        setCardTitle(card, titleAsString);\r\n        let imgUrl = getBaseUrl() + \"/image/imagePlaceholder.png\";\r\n        setCardImageLink(card, imgUrl);\r\n        setCardSummary(card, summaryAsString);\r\n        setCardAuthor(card, authorAsString);\r\n        setCardBtn(card, buttonTitleAsString, \"https://adaptivecards.io\");\r\n    }\r\n\r\n    private getTeamList = async () => {\r\n        try {\r\n            const response = await getTeams();\r\n            this.setState({\r\n                teams: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private getGroupItems() {\r\n        if (this.state.groups) {\r\n            return this.makeDropdownItems(this.state.groups);\r\n        }\r\n        const dropdownItems: dropdownItem[] = [];\r\n        return dropdownItems;\r\n    }\r\n\r\n    private setGroupAccess = async () => {\r\n        await verifyGroupAccess().then(() => {\r\n            this.setState({\r\n                groupAccess: true\r\n            });\r\n        }).catch((error) => {\r\n            const errorStatus = error.response.status;\r\n            if (errorStatus === 403) {\r\n                this.setState({\r\n                    groupAccess: false\r\n                });\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n\r\n    private getGroupData = async (id: number) => {\r\n        try {\r\n            const response = await getGroups(id);\r\n            this.setState({\r\n                groups: response.data\r\n            });\r\n        }\r\n        catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getDraftNotification(id);\r\n            const draftMessageDetail = response.data;\r\n            let selectedRadioButton = \"teams\";\r\n            if (draftMessageDetail.rosters.length > 0) {\r\n                selectedRadioButton = \"rosters\";\r\n            }\r\n            else if (draftMessageDetail.groups.length > 0) {\r\n                selectedRadioButton = \"groups\";\r\n            }\r\n            else if (draftMessageDetail.allUsers) {\r\n                selectedRadioButton = \"allUsers\";\r\n            }\r\n            this.setState({\r\n                teamsOptionSelected: draftMessageDetail.teams.length > 0,\r\n                selectedTeamsNum: draftMessageDetail.teams.length,\r\n                rostersOptionSelected: draftMessageDetail.rosters.length > 0,\r\n                selectedRostersNum: draftMessageDetail.rosters.length,\r\n                groupsOptionSelected: draftMessageDetail.groups.length > 0,\r\n                selectedGroupsNum: draftMessageDetail.groups.length,\r\n                selectedRadioBtn: selectedRadioButton,\r\n                selectedTeams: draftMessageDetail.teams,\r\n                selectedRosters: draftMessageDetail.rosters,\r\n                selectedGroups: draftMessageDetail.groups\r\n            });\r\n\r\n            setCardTitle(this.card, draftMessageDetail.title);\r\n            setCardImageLink(this.card, draftMessageDetail.imageLink);\r\n            setCardSummary(this.card, draftMessageDetail.summary);\r\n            setCardAuthor(this.card, draftMessageDetail.author);\r\n            setCardBtn(this.card, draftMessageDetail.buttonTitle, draftMessageDetail.buttonLink);\r\n\r\n            this.setState({\r\n                title: draftMessageDetail.title,\r\n                summary: draftMessageDetail.summary,\r\n                btnLink: draftMessageDetail.buttonLink,\r\n                imageLink: draftMessageDetail.imageLink,\r\n                btnTitle: draftMessageDetail.buttonTitle,\r\n                author: draftMessageDetail.author,\r\n                allUsersOptionSelected: draftMessageDetail.allUsers,\r\n                loader: false\r\n            }, () => {\r\n                this.updateCard();\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.page === \"CardCreation\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.title}\r\n                                    label={this.localize(\"TitleText\")}\r\n                                    placeholder={this.localize(\"PlaceHolderTitle\")}\r\n                                    onChange={this.onTitleChanged}\r\n                                    autoComplete=\"off\"\r\n                                    required\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.imageLink}\r\n                                    label={this.localize(\"ImageURL\")}\r\n                                    placeholder={this.localize(\"ImageURLPlaceHolder\")}\r\n                                    onChange={this.onImageLinkChanged}\r\n                                    errorLabel={this.state.errorImageUrlMessage}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <TextArea\r\n                                    className=\"inputField textArea\"\r\n                                    autoFocus\r\n                                    placeholder={this.localize(\"Summary\")}\r\n                                    label={this.localize(\"SummaryPlaceHolder\")}\r\n                                    value={this.state.summary}\r\n                                    onChange={this.onSummaryChanged}\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.author}\r\n                                    label={this.localize(\"Author\")}\r\n                                    placeholder={this.localize(\"AuthorPlaceHolder\")}\r\n                                    onChange={this.onAuthorChanged}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.btnTitle}\r\n                                    label={this.localize(\"ButtonTitle\")}\r\n                                    placeholder={this.localize(\"ButtonTitlePlaceHolder\")}\r\n                                    onChange={this.onBtnTitleChanged}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.btnLink}\r\n                                    label={this.localize(\"ButtonURL\")}\r\n                                    placeholder={this.localize(\"ButtonURLPlaceHolder\")}\r\n                                    onChange={this.onBtnLinkChanged}\r\n                                    errorLabel={this.state.errorButtonUrlMessage}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"Next\")} disabled={this.isNextBtnDisabled()} id=\"saveBtn\" onClick={this.onNext} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else if (this.state.page === \"AudienceSelection\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <h3>{this.localize(\"SendHeadingText\")}</h3>\r\n                                <RadiobuttonGroup\r\n                                    className=\"radioBtns\"\r\n                                    value={this.state.selectedRadioBtn}\r\n                                    onSelected={this.onGroupSelected}\r\n                                >\r\n                                    <Radiobutton className=\"bottom-space\" name=\"grouped\" value=\"rosters\" label={this.localize(\"SendToRosters\")} />\r\n                                    {this.state.rostersOptionSelected &&\r\n                                        <Dropdown\r\n                                            className=\"bottom-space\"\r\n                                            placeholder={this.localize(\"SendToRostersPlaceHolder\")}\r\n                                            search\r\n                                            multiple\r\n                                            items={this.getItems()}\r\n                                            value={this.state.selectedRosters}\r\n                                            onChange={this.onRostersChange}\r\n                                            unstable_pinned={this.state.unstablePinned}\r\n                                            noResultsMessage={this.localize(\"NoMatchMessage\")}\r\n                                        />\r\n                                    }\r\n                                    <Radiobutton className=\"bottom-space\" name=\"grouped\" value=\"groups\" label={this.localize(\"SendToGroups\")} />\r\n                                    <div className={this.state.groupsOptionSelected && !this.state.groupAccess ? \"\" : \"hide\"}>\r\n                                        <div className=\"noteText\">\r\n                                            <Text error content={this.localize(\"SendToGroupsPermissionNote\")} />\r\n                                        </div>\r\n                                    </div>\r\n                                    {(this.state.groupsOptionSelected && this.state.groupAccess) &&\r\n                                            <Dropdown\r\n                                            className=\"hideToggle\"\r\n                                            placeholder={this.localize(\"SendToGroupsPlaceHolder\")}\r\n                                            search={this.onGroupSearch}\r\n                                            multiple\r\n                                            loading={this.state.loading}\r\n                                            loadingMessage={this.localize(\"LoadingText\")}\r\n                                            items={this.getGroupItems()}\r\n                                            value={this.state.selectedGroups}\r\n                                            onSearchQueryChange={this.onGroupSearchQueryChange}\r\n                                            onChange={this.onGroupsChange}\r\n                                            noResultsMessage={this.state.noResultMessage}\r\n                                            unstable_pinned={this.state.unstablePinned}\r\n                                        />\r\n                                    }\r\n                                    <div className={this.state.groupsOptionSelected && this.state.groupAccess ? \"\" : \"hide\"}>\r\n                                        <div className=\"noteText\">\r\n                                            <Text error content={this.localize(\"SendToGroupsNote\")} />\r\n                                        </div>\r\n                                    </div>\r\n                                </RadiobuttonGroup>\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <Flex space=\"between\">\r\n                                <Button icon={<ChevronStartIcon xSpacing=\"before\" />} content={this.localize(\"Back\")} text onClick={this.onBack} />\r\n                                <Flex className=\"buttonContainer\">\r\n                                    <Button content={this.localize(\"SaveAsDraft\")} disabled={this.isBtnDisabled() || this.state.disableButton} id=\"saveBtn\" onClick={this.onSave} secondary />\r\n                                    <Button content={this.localize(\"PublishButtonText\")} disabled={this.isBtnDisabled() || this.state.disableButton} id=\"saveBtn\" onClick={() => this.onPublish()} primary />\r\n                                </Flex>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (<div>Error</div>);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onGroupSelected = (value: any) => {\r\n        this.setState({\r\n            selectedRadioBtn: value,\r\n            teamsOptionSelected: value === 'teams',\r\n            rostersOptionSelected: value === 'rosters',\r\n            groupsOptionSelected: value === 'groups',\r\n            allUsersOptionSelected: value === 'allUsers',\r\n            selectedTeams: value === 'teams' ? this.state.selectedTeams : [],\r\n            selectedTeamsNum: value === 'teams' ? this.state.selectedTeamsNum : 0,\r\n            selectedRosters: value === 'rosters' ? this.state.selectedRosters : [],\r\n            selectedRostersNum: value === 'rosters' ? this.state.selectedRostersNum : 0,\r\n            selectedGroups: value === 'groups' ? this.state.selectedGroups : [],\r\n            selectedGroupsNum: value === 'groups' ? this.state.selectedGroupsNum : 0,\r\n        });\r\n    }\r\n\r\n    private isBtnDisabled = () => {\r\n        const teamsSelectionIsValid = (this.state.teamsOptionSelected && (this.state.selectedTeamsNum !== 0)) || (!this.state.teamsOptionSelected);\r\n        const rostersSelectionIsValid = (this.state.rostersOptionSelected && (this.state.selectedRostersNum !== 0)) || (!this.state.rostersOptionSelected);\r\n        const groupsSelectionIsValid = (this.state.groupsOptionSelected && (this.state.selectedGroupsNum !== 0)) || (!this.state.groupsOptionSelected);\r\n        const nothingSelected = (!this.state.teamsOptionSelected) && (!this.state.rostersOptionSelected) && (!this.state.groupsOptionSelected) && (!this.state.allUsersOptionSelected);\r\n        return (!teamsSelectionIsValid || !rostersSelectionIsValid || !groupsSelectionIsValid || nothingSelected)\r\n    }\r\n\r\n    private isNextBtnDisabled = () => {\r\n        const title = this.state.title;\r\n        const btnTitle = this.state.btnTitle;\r\n        const btnLink = this.state.btnLink;\r\n        return !(title && ((btnTitle && btnLink) || (!btnTitle && !btnLink)) && (this.state.errorImageUrlMessage === \"\") && (this.state.errorButtonUrlMessage === \"\"));\r\n    }\r\n\r\n    private getItems = () => {\r\n        const resultedTeams: dropdownItem[] = [];\r\n        if (this.state.teams) {\r\n            let remainingUserTeams = this.state.teams;\r\n            if (this.state.selectedRadioBtn !== \"allUsers\") {\r\n                if (this.state.selectedRadioBtn === \"teams\") {\r\n                    this.state.teams.filter(x => this.state.selectedTeams.findIndex(y => y.team.id === x.id) < 0);\r\n                }\r\n                else if (this.state.selectedRadioBtn === \"rosters\") {\r\n                    this.state.teams.filter(x => this.state.selectedRosters.findIndex(y => y.team.id === x.id) < 0);\r\n                }\r\n            }\r\n            remainingUserTeams.map((element) => {\r\n                resultedTeams.push({\r\n                    key: element.id,\r\n                    header: element.name,\r\n                    content: element.mail,\r\n                    image: ImageUtil.makeInitialImage(element.name),\r\n                    team: {\r\n                        id: element.id\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private static MAX_SELECTED_TEAMS_NUM: number = 20;\r\n\r\n    private onTeamsChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value.length > NewMessage.MAX_SELECTED_TEAMS_NUM) return;\r\n        this.setState({\r\n            selectedTeams: itemsData.value,\r\n            selectedTeamsNum: itemsData.value.length,\r\n            selectedRosters: [],\r\n            selectedRostersNum: 0,\r\n            selectedGroups: [],\r\n            selectedGroupsNum: 0\r\n        })\r\n    }\r\n\r\n    private onRostersChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value.length > NewMessage.MAX_SELECTED_TEAMS_NUM) return;\r\n        this.setState({\r\n            selectedRosters: itemsData.value,\r\n            selectedRostersNum: itemsData.value.length,\r\n            selectedTeams: [],\r\n            selectedTeamsNum: 0,\r\n            selectedGroups: [],\r\n            selectedGroupsNum: 0\r\n        })\r\n    }\r\n\r\n    private onGroupsChange = (event: any, itemsData: any) => {\r\n        this.setState({\r\n            selectedGroups: itemsData.value,\r\n            selectedGroupsNum: itemsData.value.length,\r\n            groups: [],\r\n            selectedTeams: [],\r\n            selectedTeamsNum: 0,\r\n            selectedRosters: [],\r\n            selectedRostersNum: 0\r\n        })\r\n    }\r\n\r\n    private onGroupSearch = (itemList: any, searchQuery: string) => {\r\n        const result = itemList.filter(\r\n            (item: { header: string; content: string; }) => (item.header && item.header.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1) ||\r\n                (item.content && item.content.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1),\r\n        )\r\n        return result;\r\n    }\r\n\r\n    private onGroupSearchQueryChange = async (event: any, itemsData: any) => {\r\n\r\n        if (!itemsData.searchQuery) {\r\n            this.setState({\r\n                groups: [],\r\n                noResultMessage: \"\",\r\n            });\r\n        }\r\n        else if (itemsData.searchQuery && itemsData.searchQuery.length <= 2) {\r\n            this.setState({\r\n                loading: false,\r\n                noResultMessage: this.localize(\"NoResultMessage\"),\r\n            });\r\n        }\r\n        else if (itemsData.searchQuery && itemsData.searchQuery.length > 2) {\r\n            // handle event trigger on item select.\r\n            const result = itemsData.items && itemsData.items.find(\r\n                (item: { header: string; }) => item.header.toLowerCase() === itemsData.searchQuery.toLowerCase()\r\n            )\r\n            if (result) {\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                loading: true,\r\n                noResultMessage: \"\",\r\n            });\r\n\r\n            try {\r\n                const query = encodeURIComponent(itemsData.searchQuery);\r\n                const response = await searchGroups(query);\r\n                this.setState({\r\n                    groups: response.data,\r\n                    loading: false,\r\n                    noResultMessage: this.localize(\"NoResultMessage\")\r\n                });\r\n            }\r\n            catch (error) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async onPublish() {\r\n        this.setState({ disableButton: true });\r\n        const selectedTeams: string[] = [];\r\n        const selctedRosters: string[] = [];\r\n        const selectedGroups: string[] = [];\r\n        this.state.selectedTeams.map(x => selectedTeams.push(x.team.id));\r\n        this.state.selectedRosters.map(x => selctedRosters.push(x.team.id));\r\n        this.state.selectedGroups.map(x => selectedGroups.push(x.team.id));\r\n\r\n        const draftMessage: IDraftMessage = {\r\n            id: this.state.messageId,\r\n            title: this.state.title,\r\n            imageLink: this.state.imageLink,\r\n            summary: this.state.summary,\r\n            author: this.state.author,\r\n            buttonTitle: this.state.btnTitle,\r\n            buttonLink: this.state.btnLink,\r\n            teams: selectedTeams,\r\n            rosters: selctedRosters,\r\n            groups: selectedGroups,\r\n            allUsers: this.state.allUsersOptionSelected\r\n        };\r\n\r\n        let messageId;\r\n        if (this.state.exists) {\r\n            this.editDraftMessage(draftMessage);\r\n        } else {\r\n            messageId = await this.postDraftMessage(draftMessage);\r\n        }\r\n\r\n        this.history.push('/sendconfirmation/' + messageId);\r\n    }\r\n\r\n    private onSave = () => {\r\n        this.setState({ disableButton: true });\r\n        const selectedTeams: string[] = [];\r\n        const selctedRosters: string[] = [];\r\n        const selectedGroups: string[] = [];\r\n        this.state.selectedTeams.map(x => selectedTeams.push(x.team.id));\r\n        this.state.selectedRosters.map(x => selctedRosters.push(x.team.id));\r\n        this.state.selectedGroups.map(x => selectedGroups.push(x.team.id));\r\n\r\n        const draftMessage: IDraftMessage = {\r\n            id: this.state.messageId,\r\n            title: this.state.title,\r\n            imageLink: this.state.imageLink,\r\n            summary: this.state.summary,\r\n            author: this.state.author,\r\n            buttonTitle: this.state.btnTitle,\r\n            buttonLink: this.state.btnLink,\r\n            teams: selectedTeams,\r\n            rosters: selctedRosters,\r\n            groups: selectedGroups,\r\n            allUsers: this.state.allUsersOptionSelected\r\n        };\r\n\r\n        if (this.state.exists) {\r\n            this.editDraftMessage(draftMessage).then(() => {\r\n                microsoftTeams.tasks.submitTask();\r\n            });\r\n        } else {\r\n            this.postDraftMessage(draftMessage).then(() => {\r\n                microsoftTeams.tasks.submitTask();\r\n            });\r\n        }\r\n    }\r\n\r\n    private editDraftMessage = async (draftMessage: IDraftMessage) => {\r\n        try {\r\n            await updateDraftNotification(draftMessage);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private postDraftMessage = async (draftMessage: IDraftMessage) => {\r\n        try {\r\n            let response = await createDraftNotification(draftMessage);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public escFunction(event: any) {\r\n        if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n            microsoftTeams.tasks.submitTask();\r\n        }\r\n    }\r\n\r\n    private onNext = (event: any) => {\r\n        this.setState({\r\n            page: \"AudienceSelection\"\r\n        }, () => {\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onBack = (event: any) => {\r\n        this.setState({\r\n            page: \"CardCreation\"\r\n        }, () => {\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onTitleChanged = (event: any) => {\r\n        let showDefaultCard = (!event.target.value && !this.state.imageLink && !this.state.summary && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, event.target.value);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            title: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onImageLinkChanged = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\") || (url.startsWith(\"data:image/png;base64,\")) || (url.startsWith(\"data:image/jpeg;base64,\")) || (url.startsWith(\"data:image/gif;base64,\"))))) {\r\n            this.setState({\r\n                errorImageUrlMessage: this.localize(\"ErrorUrlMessage\")\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorImageUrlMessage: \"\"\r\n            });\r\n        }\r\n\r\n        let showDefaultCard = (!this.state.title && !event.target.value && !this.state.summary && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, event.target.value);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            imageLink: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onSummaryChanged = (event: any) => {\r\n        let showDefaultCard = (!this.state.title && !this.state.imageLink && !event.target.value && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, event.target.value);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            summary: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onAuthorChanged = (event: any) => {\r\n        let showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !event.target.value && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, event.target.value);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            author: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onBtnTitleChanged = (event: any) => {\r\n        const showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !this.state.author && !event.target.value && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        if (event.target.value && this.state.btnLink) {\r\n            setCardBtn(this.card, event.target.value, this.state.btnLink);\r\n            this.setState({\r\n                btnTitle: event.target.value,\r\n                card: this.card\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        } else {\r\n            delete this.card.actions;\r\n            this.setState({\r\n                btnTitle: event.target.value,\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        }\r\n    }\r\n\r\n    private onBtnLinkChanged = (event: any) => {\r\n        if (!(event.target.value === \"\" || event.target.value.toLowerCase().startsWith(\"https://\"))) {\r\n            this.setState({\r\n                errorButtonUrlMessage: this.localize(\"ErrorUrlMessage\")\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorButtonUrlMessage: \"\"\r\n            });\r\n        }\r\n\r\n        const showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !this.state.author && !this.state.btnTitle && !event.target.value);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        if (this.state.btnTitle && event.target.value) {\r\n            setCardBtn(this.card, this.state.btnTitle, event.target.value);\r\n            this.setState({\r\n                btnLink: event.target.value,\r\n                card: this.card\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        } else {\r\n            delete this.card.actions;\r\n            this.setState({\r\n                btnLink: event.target.value\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateCard = () => {\r\n        const adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n        adaptiveCard.parse(this.state.card);\r\n        const renderedCard = adaptiveCard.render();\r\n        const container = document.getElementsByClassName('adaptiveCardContainer')[0].firstChild;\r\n        if (container != null) {\r\n            container.replaceWith(renderedCard);\r\n        } else {\r\n            document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n        }\r\n        const link = this.state.btnLink;\r\n        adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); }\r\n    }\r\n}\r\n\r\nconst newMessageWithTranslation = withTranslation()(NewMessage);\r\nexport default newMessageWithTranslation;\r\n","// <copyright file=\"groupType.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nexport enum GroupType {\r\n    teams = \"Teams\",\r\n    external = \"External\"\r\n}\r\n\r\nexport enum MatchingFrequencyType {\r\n    weekly = 0,\r\n    monthly = 1\r\n}","import * as React from 'react';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport './statusTaskModule.scss';\r\nimport { getSentNotification, exportNotification } from '../../apis/messageListApi';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { TooltipHost } from 'office-ui-fabric-react';\r\nimport { Loader, List, Image, Button, DownloadIcon, AcceptIcon, CloseIcon } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { formatDate, formatDuration, formatNumber } from '../../i18n';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface IListItem {\r\n    header: string,\r\n    media: JSX.Element,\r\n}\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    title: string;\r\n    acknowledgements?: string;\r\n    reactions?: string;\r\n    responses?: string;\r\n    succeeded?: string;\r\n    failed?: string;\r\n    unknown?: string;\r\n    sentDate?: string;\r\n    imageLink?: string;\r\n    summary?: string;\r\n    author?: string;\r\n    buttonLink?: string;\r\n    buttonTitle?: string;\r\n    teamNames?: string[];\r\n    rosterNames?: string[];\r\n    groupNames?: string[];\r\n    allUsers?: boolean;\r\n    sendingStartedDate?: string;\r\n    sendingDuration?: string;\r\n    errorMessage?: string;\r\n    warningMessage?: string;\r\n    canDownload?: boolean;\r\n    sendingCompleted?: boolean;\r\n}\r\n\r\nexport interface IStatusState {\r\n    message: IMessage;\r\n    loader: boolean;\r\n    page: string;\r\n}\r\n\r\ninterface StatusTaskModuleProps extends RouteComponentProps, WithTranslation { }\r\n\r\nclass StatusTaskModule extends React.Component<StatusTaskModuleProps, IStatusState> {\r\n    readonly localize: TFunction;\r\n    private initMessage = {\r\n        id: \"\",\r\n        title: \"\"\r\n    };\r\n\r\n    private card: any;\r\n\r\n    constructor(props: StatusTaskModuleProps) {\r\n        super(props);\r\n        initializeIcons();\r\n\r\n        this.localize = this.props.t;\r\n\r\n        this.card = getInitAdaptiveCard(this.props.t);\r\n\r\n        this.state = {\r\n            message: this.initMessage,\r\n            loader: true,\r\n            page: \"ViewStatus\",\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        let params = this.props.match.params;\r\n\r\n        if ('id' in params) {\r\n            let id = params['id'];\r\n            this.getItem(id).then(() => {\r\n                this.setState({\r\n                    loader: false\r\n                }, () => {\r\n                    setCardTitle(this.card, this.state.message.title);\r\n                    setCardImageLink(this.card, this.state.message.imageLink);\r\n                    setCardSummary(this.card, this.state.message.summary);\r\n                    setCardAuthor(this.card, this.state.message.author);\r\n                    if (this.state.message.buttonTitle !== \"\" && this.state.message.buttonLink !== \"\") {\r\n                        setCardBtn(this.card, this.state.message.buttonTitle, this.state.message.buttonLink);\r\n                    }\r\n\r\n                    let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                    adaptiveCard.parse(this.card);\r\n                    let renderedCard = adaptiveCard.render();\r\n                    document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                    let link = this.state.message.buttonLink;\r\n                    adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getSentNotification(id);\r\n            response.data.sendingDuration = formatDuration(response.data.sendingStartedDate, response.data.sentDate);\r\n            response.data.sendingStartedDate = formatDate(response.data.sendingStartedDate);\r\n            response.data.sentDate = formatDate(response.data.sentDate);\r\n            response.data.succeeded = formatNumber(response.data.succeeded);\r\n            response.data.failed = formatNumber(response.data.failed);\r\n            response.data.unknown = response.data.unknown && formatNumber(response.data.unknown);\r\n            this.setState({\r\n                message: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.page === \"ViewStatus\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"TitleText\")}</h3>\r\n                                    <span>{this.state.message.title}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"SendingStarted\")}</h3>\r\n                                    <span>{this.state.message.sendingStartedDate}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Completed\")}</h3>\r\n                                    <span>{this.state.message.sentDate}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Duration\")}</h3>\r\n                                    <span>{this.state.message.sendingDuration}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Results\")}</h3>\r\n                                    <label>{this.localize(\"Success\", { \"SuccessCount\": this.state.message.succeeded })}</label>\r\n                                    <br />\r\n                                    <label>{this.localize(\"Failure\", { \"FailureCount\": this.state.message.failed })}</label>\r\n                                    <br />\r\n                                    {this.state.message.unknown &&\r\n                                        <>\r\n                                        <label>{this.localize(\"Unknown\", { \"UnknownCount\": this.state.message.unknown })}</label>\r\n                                        </>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderAudienceSelection()}\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderErrorMessage()}\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderWarningMessage()}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <div className={this.state.message.canDownload ? \"\" : \"disabled\"}>\r\n                                <div className=\"buttonContainer\">\r\n                                    <Loader id=\"sendingLoader\" className=\"hiddenLoader sendingLoader\" size=\"smallest\" label={this.localize(\"ExportLabel\")} labelPosition=\"end\" />\r\n                                    <TooltipHost content={!this.state.message.sendingCompleted ? \"\" : (this.state.message.canDownload ? \"\" : this.localize(\"ExportButtonProgressText\"))} calloutProps={{ gapSpace: 0 }}>\r\n                                        <Button icon={<DownloadIcon size=\"medium\" />} disabled={!this.state.message.canDownload || !this.state.message.sendingCompleted} content={this.localize(\"ExportButtonText\")} id=\"exportBtn\" onClick={this.onExport} primary />\r\n                                    </TooltipHost>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else if (this.state.page === \"SuccessPage\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"displayMessageField\">\r\n                                <br />\r\n                                <br />\r\n                                <div><span><AcceptIcon className=\"iconStyle\" xSpacing=\"before\" size=\"largest\" outline /></span>\r\n                                    <h1>{this.localize(\"ExportQueueTitle\")}</h1></div>\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage1\")}</span>\r\n                                <br />\r\n                                <br />\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage2\")}</span>\r\n                                <br />\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage3\")}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"CloseText\")} id=\"closeBtn\" onClick={this.onClose} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"displayMessageField\">\r\n                                <br />\r\n                                <br />\r\n                                <div><span><CloseIcon className=\"iconStyle\" xSpacing=\"before\" size=\"largest\" outline /></span>\r\n                                    <h1 className=\"light\">{this.localize(\"ExportErrorTitle\")}</h1></div>\r\n                                <span>{this.localize(\"ExportErrorMessage\")}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"CloseText\")} id=\"closeBtn\" onClick={this.onClose} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    private onClose = () => {\r\n        microsoftTeams.tasks.submitTask();\r\n    }\r\n\r\n    private onExport = async () => {\r\n        let spanner = document.getElementsByClassName(\"sendingLoader\");\r\n        spanner[0].classList.remove(\"hiddenLoader\");\r\n        await exportNotification(this.state.message.id).then(() => {\r\n            this.setState({ page: \"SuccessPage\" })\r\n        }).catch(() => {\r\n            this.setState({ page: \"ErrorPage\" })\r\n        });\r\n    }\r\n\r\n    private getItemList = (items: string[]) => {\r\n        let resultedTeams: IListItem[] = [];\r\n        if (items) {\r\n            resultedTeams = items.map((element) => {\r\n                const resultedTeam: IListItem = {\r\n                    header: element,\r\n                    media: <Image src={ImageUtil.makeInitialImage(element)} avatar />\r\n                }\r\n                return resultedTeam;\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n    private renderAudienceSelection = () => {\r\n        if (this.state.message.teamNames && this.state.message.teamNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToGeneralChannel\")}</h3>\r\n                    <List items={this.getItemList(this.state.message.teamNames)} />\r\n                </div>);\r\n        } else if (this.state.message.rosterNames && this.state.message.rosterNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToRosters\")}</h3>\r\n                    <List items={this.getItemList(this.state.message.rosterNames)} />\r\n                </div>);\r\n        } else if (this.state.message.groupNames && this.state.message.groupNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToGroups1\")}</h3>\r\n                    <span>{this.localize(\"SentToGroups2\")}</span>\r\n                    <List items={this.getItemList(this.state.message.groupNames)} />\r\n                </div>);\r\n        } else if (this.state.message.allUsers) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SendToAllUsers\")}</h3>\r\n                </div>);\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n    private renderErrorMessage = () => {\r\n        if (this.state.message.errorMessage) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"Errors\")}</h3>\r\n                    <span>{this.state.message.errorMessage}</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n\r\n    private renderWarningMessage = () => {\r\n        if (this.state.message.warningMessage) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"Warnings\")}</h3>\r\n                    <span>{this.state.message.warningMessage}</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst StatusTaskModuleWithTranslation = withTranslation()(StatusTaskModule);\r\nexport default StatusTaskModuleWithTranslation;","import * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { Loader, Button, Text, List, Image } from '@fluentui/react-northstar';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './sendConfirmationTaskModule.scss';\r\nimport { getDraftNotification, getConsentSummaries, sendDraftNotification } from '../../apis/messageListApi';\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface IListItem {\r\n    header: string,\r\n    media: JSX.Element,\r\n}\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    title: string;\r\n    acknowledgements?: number;\r\n    reactions?: number;\r\n    responses?: number;\r\n    succeeded?: number;\r\n    failed?: number;\r\n    throttled?: number;\r\n    sentDate?: string;\r\n    imageLink?: string;\r\n    summary?: string;\r\n    author?: string;\r\n    buttonLink?: string;\r\n    buttonTitle?: string;\r\n}\r\n\r\nexport interface SendConfirmationTaskModuleProps extends RouteComponentProps, WithTranslation {\r\n}\r\n\r\nexport interface IStatusState {\r\n    message: IMessage;\r\n    loader: boolean;\r\n    teamNames: string[];\r\n    rosterNames: string[];\r\n    groupNames: string[];\r\n    allUsers: boolean;\r\n    messageId: number;\r\n}\r\n\r\nclass SendConfirmationTaskModule extends React.Component<SendConfirmationTaskModuleProps, IStatusState> {\r\n    readonly localize: TFunction;\r\n    private initMessage = {\r\n        id: \"\",\r\n        title: \"\"\r\n    };\r\n\r\n    private card: any;\r\n\r\n    constructor(props: SendConfirmationTaskModuleProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.card = getInitAdaptiveCard(this.localize);\r\n\r\n        this.state = {\r\n            message: this.initMessage,\r\n            loader: true,\r\n            teamNames: [],\r\n            rosterNames: [],\r\n            groupNames: [],\r\n            allUsers: false,\r\n            messageId: 0,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n\r\n        let params = this.props.match.params;\r\n\r\n        if ('id' in params) {\r\n            let id = params['id'];\r\n            this.getItem(id).then(() => {\r\n                getConsentSummaries(id).then((response) => {\r\n                    this.setState({\r\n                        teamNames: response.data.teamNames.sort(),\r\n                        rosterNames: response.data.rosterNames.sort(),\r\n                        groupNames: response.data.groupNames.sort(),\r\n                        allUsers: response.data.allUsers,\r\n                        messageId: id,\r\n                    }, () => {\r\n                        this.setState({\r\n                            loader: false\r\n                        }, () => {\r\n                            setCardTitle(this.card, this.state.message.title);\r\n                            setCardImageLink(this.card, this.state.message.imageLink);\r\n                            setCardSummary(this.card, this.state.message.summary);\r\n                            setCardAuthor(this.card, this.state.message.author);\r\n                            if (this.state.message.buttonTitle && this.state.message.buttonLink) {\r\n                                setCardBtn(this.card, this.state.message.buttonTitle, this.state.message.buttonLink);\r\n                            }\r\n\r\n                            let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                            adaptiveCard.parse(this.card);\r\n                            let renderedCard = adaptiveCard.render();\r\n                            document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                            if (this.state.message.buttonLink) {\r\n                                let link = this.state.message.buttonLink;\r\n                                adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); };\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getDraftNotification(id);\r\n            this.setState({\r\n                message: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"taskModule\">\r\n                    <div className=\"formContainer\">\r\n                        <div className=\"formContentContainer\" >\r\n                            <div className=\"contentField\">\r\n                                <h3>{this.localize(\"ConfirmToSend\")}</h3>\r\n                                <span>{this.localize(\"SendToRecipientsLabel\")}</span>\r\n                            </div>\r\n\r\n                            <div className=\"results\">\r\n                                {this.renderAudienceSelection()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"adaptiveCardContainer\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"footerContainer\">\r\n                        <div className=\"buttonContainer\">\r\n                            <Loader id=\"sendingLoader\" className=\"hiddenLoader sendingLoader\" size=\"smallest\" label={this.localize(\"PreparingMessageLabel\")} labelPosition=\"end\" />\r\n                            <Button content={this.localize(\"Send\")} id=\"sendBtn\" onClick={this.onSendMessage} primary />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private onSendMessage = () => {\r\n        let spanner = document.getElementsByClassName(\"sendingLoader\");\r\n        spanner[0].classList.remove(\"hiddenLoader\");\r\n        sendDraftNotification(this.state.message).then(() => {\r\n            microsoftTeams.tasks.submitTask();\r\n        });\r\n    }\r\n\r\n    private getItemList = (items: string[]) => {\r\n        let resultedTeams: IListItem[] = [];\r\n        if (items) {\r\n            resultedTeams = items.map((element) => {\r\n                const resultedTeam: IListItem = {\r\n                    header: element,\r\n                    media: <Image src={ImageUtil.makeInitialImage(element)} avatar />\r\n                }\r\n                return resultedTeam;\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private renderAudienceSelection = () => {\r\n        if (this.state.teamNames && this.state.teamNames.length > 0) {\r\n            return (\r\n                <div key=\"teamNames\"> <span className=\"label\">{this.localize(\"TeamsLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.teamNames)} />\r\n                </div>\r\n            );\r\n        } else if (this.state.rosterNames && this.state.rosterNames.length > 0) {\r\n            return (\r\n                <div key=\"rosterNames\"> <span className=\"label\">{this.localize(\"TeamsMembersLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.rosterNames)} />\r\n                </div>);\r\n        } else if (this.state.groupNames && this.state.groupNames.length > 0) {\r\n            return (\r\n                <div key=\"groupNames\" > <span className=\"label\">{this.localize(\"GroupsMembersLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.groupNames)} />\r\n                </div>);\r\n        } else if (this.state.allUsers) {\r\n            return (\r\n                <div key=\"allUsers\">\r\n                    <span className=\"label\">{this.localize(\"AllUsersLabel\")}</span>\r\n                    <div className=\"noteText\">\r\n                        <Text error content={this.localize(\"SendToAllUsersNote\")} />\r\n                    </div>\r\n                </div>);\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst sendConfirmationTaskModuleWithTranslation = withTranslation()(SendConfirmationTaskModule);\r\nexport default sendConfirmationTaskModuleWithTranslation;","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Text } from '@fluentui/react-northstar';\r\nimport './errorPage.scss';\r\n\r\nconst ErrorPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n    const { t } = useTranslation();\r\n\r\n    function parseErrorMessage(): string {\r\n        const params = props.match.params;\r\n        if ('id' in params) {\r\n            const id = params['id'];\r\n            if (id === \"401\") {\r\n                return t(\"UnauthorizedErrorMessage\");\r\n            } else if (id === \"403\") {\r\n                return t(\"ForbiddenErrorMessage\");\r\n            }\r\n        }\r\n        return t(\"GeneralErrorMessage\");\r\n    }\r\n\r\n    return (\r\n        <Text content={parseErrorMessage()} className=\"error-message\" error size=\"medium\" />\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Text, Button } from \"@fluentui/react-northstar\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport \"./signInPage.scss\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst SignInPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n  const { t } = useTranslation();\r\n  const errorMessage = t(\"SignInPromptMessage\");\r\n\r\n  function onSignIn() {\r\n    microsoftTeams.authentication.authenticate({\r\n      url: window.location.origin + \"/signin-simple-start\",\r\n      successCallback: () => {\r\n        console.log(\"Login succeeded!\");\r\n        window.location.href = \"/messages\";\r\n      },\r\n      failureCallback: (reason) => {\r\n        console.log(\"Login failed: \" + reason);\r\n        window.location.href = `/errorpage?locale=${i18n.language}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"sign-in-content-container\">\r\n      <Text\r\n        content={errorMessage}\r\n        size=\"medium\"\r\n      />\r\n      <div className=\"space\"></div>\r\n      <Button content={t(\"SignIn\")} primary className=\"sign-in-button\" onClick={onSignIn} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInPage;\r\n","import React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getAuthenticationConsentMetadata } from '../../apis/messageListApi';\r\n\r\nconst SignInSimpleStart: React.FunctionComponent = () => {\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n\r\n        microsoftTeams.getContext(context => {\r\n            const windowLocationOriginDomain = window.location.origin.replace(\"https://\", \"\");\r\n            const login_hint = context.upn ? context.upn : \"\";\r\n\r\n            getAuthenticationConsentMetadata(windowLocationOriginDomain, login_hint).then(result => {\r\n                window.location.assign(result.data);\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleStart;","// <copyright file=\"employeeResourceGroupApi.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from './axiosJWTDecorator';\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nlet baseAxiosUrl = getBaseUrl() + '/api';\r\n\r\n/**\r\n* Method to get searchable employee resource groups.\r\n*/\r\nexport const getSearchableResourceGroupsAsync = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups/discover\";\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* POST Create new employee resource group\r\n* @param payload new employee resource object to be added in storage.\r\n*/\r\nexport const createNewGroup = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups\";\r\n    return await axios.post(url, payload, false);\r\n}\r\n\r\n/**\r\n* GET team details\r\n* @param id Teams unique id.\r\n*/\r\nexport const getTeamDetails = async (id: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/teamdata/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* GET employee resource group details based on id\r\n* @param unique resource group id.\r\n*/\r\nexport const getEmployeeResourceGroup = async (id: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* GET all employee resource group details\r\n*/\r\nexport const getAllEmployeeResourceGroups = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups\";\r\n    return await axios.get(url);\r\n}\r\n\r\n/**\r\n* PATCH update employee resource group details based on id\r\n* @param payload updated employee resource object to be added in storage.\r\n*/\r\nexport const updateEmployeeResourceGroup = async (id: string, payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups/\" + id;\r\n    return await axios.patch(url, payload);\r\n}\r\n\r\n/**\r\n* DELETE employee resource group details based on id\r\n* @param unique resource group id.\r\n*/\r\nexport const deleteEmployeeResourceGroup = async (id: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/resourcegroups/\" + id;\r\n    return await axios.delete(url);\r\n}","// <copyright file=\"notificationMessage.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Text } from \"@fluentui/react-northstar\";\r\nimport { PresenceAvailableIcon, BanIcon, CloseIcon } from '@fluentui/react-icons-northstar';\r\nimport './notificationMessage.scss';\r\n\r\ninterface INotificationMessageProps {\r\n    notificationStatus: boolean;\r\n    content: string;\r\n    showAlert: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\ninterface INotificationMessageState {\r\n    showAlert: boolean;\r\n}\r\n\r\nexport default class NotificationMessage extends React.Component<INotificationMessageProps, INotificationMessageState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showAlert: false\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps: INotificationMessageProps) {\r\n        if (nextProps.showAlert !== this.props.showAlert) {\r\n            this.setState({ showAlert: nextProps.showAlert })\r\n        }\r\n    }\r\n\r\n\t/**\r\n    * Renders the component\r\n    */\r\n    public render(): JSX.Element {\r\n\r\n        if (this.props.showAlert) {\r\n            return (\r\n                <div className=\"notification-container\">\r\n                    <div className={`notification-${this.props.notificationStatus ? 'success' : 'error'}`}>\r\n                        <Flex gap=\"gap.smaller\" vAlign=\"center\">\r\n                            <Flex.Item>\r\n                                {\r\n                                    this.props.notificationStatus ? <PresenceAvailableIcon color=\"green\" /> : <BanIcon color=\"red\" />\r\n                                }\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Text content={this.props.content} size=\"medium\" />\r\n                            </Flex.Item>\r\n                            <Flex.Item push>\r\n                                <div></div>\r\n                            </Flex.Item>\r\n                            <CloseIcon className=\"close-button\" onClick={this.props.onClose} />\r\n                        </Flex>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}","// <copyright file=\"ConfigurationTab.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Loader, List, Text, Flex, Checkbox, MoreIcon, MenuButton, Button, EditIcon, TrashCanIcon, Dialog, CloseIcon } from '@fluentui/react-northstar';\r\nimport { TFunction } from \"i18next\";\r\nimport { ResourceGroupResponse } from '../../models/employeeResourceGroup';\r\nimport { getAllEmployeeResourceGroups, updateEmployeeResourceGroup, deleteEmployeeResourceGroup } from '../../apis/employeeResourceGroupApi';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport './configurationTab.scss';\r\nimport Constants from '../../constants/constants';\r\nimport NotificationMessage from '../NotificationMessage/notificationMessage';\r\n\r\ninterface IState {\r\n    loader: boolean;\r\n    menuOpen: boolean;\r\n    groupId: string;\r\n    groupName: string;\r\n    openDeleteDialog: boolean;\r\n    theme: string;\r\n    groups: Array<ResourceGroupResponse>[],\r\n    alertMessage: string;\r\n    alertStatus: boolean;\r\n    showAlert: boolean;\r\n}\r\n\r\nexport interface ConfigurationTabProps extends RouteComponentProps, WithTranslation {\r\n}\r\n\r\nclass ConfigurationTab extends React.Component<ConfigurationTabProps, IState> {\r\n    readonly localize: TFunction;\r\n\r\n    constructor(props: ConfigurationTabProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            loader: false,\r\n            menuOpen: true,\r\n            groupId: \"\",\r\n            groupName: \"\",\r\n            openDeleteDialog: false,\r\n            theme: \"\",\r\n            groups: [],\r\n            alertMessage: \"\",\r\n            alertStatus: true,\r\n            showAlert: false,\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.setState({ theme: context.theme! });\r\n        });\r\n        this.setState({\r\n            loader: true\r\n        })\r\n\r\n        await this.getResourceGroups();\r\n    }\r\n\r\n    /**\r\n    * Method to get all employee resource groups.\r\n    */\r\n    private getResourceGroups = async () => {\r\n        const response = await getAllEmployeeResourceGroups();\r\n        if (response.status === 200 && response.data) {\r\n            this.setState({\r\n                groups: response.data\r\n            });\r\n        }\r\n        this.setState({\r\n            loader: false\r\n        });\r\n    }\r\n\r\n    private processLabels = () => {\r\n        const out = [{\r\n            key: \"labels\",\r\n            content: (\r\n                <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n                    <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '20%' }} >\r\n                        <Text\r\n                            truncated\r\n                            content={this.localize(\"GroupName\")}\r\n                        >\r\n                        </Text>\r\n                    </Flex.Item>\r\n                    <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '3%' }} shrink={false}>\r\n                        <Text></Text>\r\n                    </Flex.Item>\r\n                    <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '50%' }} shrink={false}>\r\n                        <Text\r\n                            truncated\r\n                            content={this.localize(\"Description\")}\r\n                        >\r\n                        </Text>\r\n                    </Flex.Item>\r\n                    <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '5%' }}>\r\n                        <Text></Text>\r\n                    </Flex.Item>\r\n                    <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '20%' }} >\r\n                        <Text\r\n                            truncated\r\n                            content={this.localize(\"SearchEnabled\")}\r\n                        >\r\n                        </Text>\r\n                    </Flex.Item>\r\n                    <Flex.Item shrink={0}>\r\n                        <Text></Text>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            ),\r\n            styles: { margin: '0.2rem 0.2rem 0 0' },\r\n        }];\r\n        return out;\r\n    }\r\n\r\n    private configurationContent = (group: any) => {\r\n        return (\r\n            <Flex className=\"listContainer\" vAlign=\"center\" fill gap=\"gap.small\">\r\n                <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '15%' }} grow={1}>\r\n                    <Text size=\"medium\"\r\n                        className=\"text-color\"\r\n                        truncated\r\n                        content={group.groupName}\r\n                        onClick={() => this.openEditTaskModule(group.groupId)}\r\n                    >\r\n                    </Text>\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '50%' }}>\r\n                    <Text\r\n                        className=\"max-width\"\r\n                        truncated\r\n                        content={group.groupDescription}\r\n                    >\r\n                    </Text>\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '5%' }}>\r\n                    <Text></Text>\r\n                </Flex.Item>\r\n                <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '15%' }} >\r\n                    <Checkbox toggle checked={group.includeInSearchResults} onChange={() => this.onSearchEnableChange(group.includeInSearchResults, group, group.groupId)} />\r\n                </Flex.Item>\r\n                <Flex>\r\n                    <MenuButton trigger={<Button icon={<MoreIcon />} text iconOnly />}\r\n                        menu={[\r\n                            {\r\n                                icon: <EditIcon size=\"medium\" />,\r\n                                key: 'Edit',\r\n                                content: this.localize(\"Edit\"),\r\n                                onClick: () => {\r\n                                    this.setState({\r\n                                        menuOpen: false,\r\n                                    });\r\n                                    this.openEditTaskModule(group.groupId);\r\n                                }\r\n                            },\r\n                            {\r\n                                icon: <TrashCanIcon size=\"medium\" />,\r\n                                key: 'Delete',\r\n                                content: this.localize(\"Delete\"),\r\n                                onClick: () => {\r\n                                    this.setState({\r\n                                        menuOpen: false,\r\n                                        groupId: group.groupId,\r\n                                        groupName: group.groupName,\r\n                                        openDeleteDialog: true\r\n                                    });\r\n                                }\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handling check box change event.\r\n     * @param isChecked | boolean value.\r\n     */\r\n    private onSearchEnableChange = async (isChecked: boolean, group: ResourceGroupResponse, id: string) => {\r\n        group.includeInSearchResults = !isChecked;\r\n        await updateEmployeeResourceGroup(id, group);\r\n        this.getResourceGroups();\r\n    }\r\n\r\n    /**\r\n     * Handling delete submit event.\r\n     */\r\n    private onDeleteHandleClick = async () => {\r\n        let response = await deleteEmployeeResourceGroup(this.state.groupId);\r\n        if (response.status === 200 && !response.data) {\r\n            this.setState({ openDeleteDialog: false })\r\n        }\r\n\r\n        this.getResourceGroups();\r\n    }\r\n\r\n    private openEditTaskModule = (groupId: string) => {\r\n        microsoftTeams.tasks.startTask({\r\n            title: this.localize('UpdateERGHeader'),\r\n            height: Constants.editTaskModuleHeight,\r\n            width: Constants.editTaskModuleWidth,\r\n            url: getBaseUrl() + \"/updateerg/\" + groupId,\r\n        }, this.submitEditHandler);\r\n    }\r\n\r\n    submitEditHandler = async () => {\r\n        await this.getResourceGroups();\r\n    };\r\n\r\n    /**\r\n   *Open the task with knowledge base data.\r\n   */\r\n    private onFaqSettingButtonClick = () => {\r\n        microsoftTeams.tasks.startTask({\r\n            title: this.localize('FaqSettingsText'),\r\n            height: Constants.faqSettingsTaskModuleHeight,\r\n            width: Constants.faqSettingsTaskModuleWidth,\r\n            url: getBaseUrl() + \"/updateKnowledgeBaseId\",\r\n        }, this.submiFaqtHandler);\r\n    }\r\n\r\n    submiFaqtHandler = async () => {\r\n    };\r\n\r\n    /**\r\n    * Show alert on submit of create resource group.\r\n    *@param status flag to show success/failed message.\r\n    */\r\n    onUpdateGroupSubmit = async (status: boolean) => {\r\n        this.showAlert(this.localize(\"GroupUpdateSuccessMessage\"), status);\r\n    }\r\n\r\n    /**\r\n    *Sets state for showing alert notification.\r\n    *@param content Notification message\r\n    *@param type Boolean value indicating 1- Success 2- Error\r\n    */\r\n    showAlert = (content: string, type: boolean) => {\r\n        this.setState({ alertMessage: content, alertStatus: type, showAlert: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ showAlert: false })\r\n            }, 4000);\r\n        });\r\n    }\r\n\r\n    /**\r\n    *Sets state for hiding alert notification.\r\n    */\r\n    hideAlert = () => {\r\n        this.setState({ showAlert: false })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        let keyCount = 0;\r\n        const processItem = (group: any) => {\r\n            keyCount++;\r\n            const out = {\r\n                key: keyCount,\r\n                content: this.configurationContent(group),\r\n                styles: { margin: '0.2rem 0.2rem 0 0' },\r\n            };\r\n            return out;\r\n        };\r\n\r\n        const label = this.processLabels();\r\n        const outList = this.state.groups.map(processItem);\r\n        const allGroups = [...label, ...outList];\r\n\r\n        if (this.state.loader) {\r\n            return (\r\n                <Loader />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Flex className=\"title-container\">\r\n                        <NotificationMessage\r\n                            onClose={this.hideAlert}\r\n                            showAlert={this.state.showAlert}\r\n                            content={this.state.alertMessage}\r\n                            notificationStatus={this.state.alertStatus}\r\n                        />\r\n                        <Text content={this.localize(\"GroupSetting\")} weight=\"semibold\" />\r\n                        <Flex.Item push>\r\n                            <Flex>\r\n                                <Button primary className=\"faq-setting-button\" content={this.localize(\"FaqSettingsText\")} onClick={() => this.onFaqSettingButtonClick()} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <List items={allGroups} className=\"list\" />\r\n                    <Dialog\r\n                        open={this.state.openDeleteDialog}\r\n                        content={<Text className=\"word-break\" content={this.localize(\"DeleteContent\", { \"GroupName\": this.state.groupName })} />}\r\n                        onConfirm={() => this.onDeleteHandleClick()}\r\n                        confirmButton={this.localize(\"Remove\")}\r\n                        header={this.localize(\"DeleteHeaderText\")}\r\n                        headerAction={{\r\n                            icon: <CloseIcon />,\r\n                            title: 'Close',\r\n                            onClick: () => { this.setState({ openDeleteDialog: false }) },\r\n                        }}\r\n                        closeOnOutsideClick\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst configurationTabWithTranslation = withTranslation()(ConfigurationTab);\r\nexport default configurationTabWithTranslation;","import React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nconst SignInSimpleEnd: React.FunctionComponent = () => {\r\n    // Parse hash parameters into key-value pairs\r\n    function getHashParameters() {\r\n        const hashParams: any = {};\r\n        window.location.hash.substr(1).split(\"&\").forEach(function (item) {\r\n            let s = item.split(\"=\"),\r\n                k = s[0],\r\n                v = s[1] && decodeURIComponent(s[1]);\r\n            hashParams[k] = v;\r\n        });\r\n        return hashParams;\r\n    }\r\n\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n\r\n        const hashParams: any = getHashParameters();\r\n        if (hashParams[\"error\"]) {\r\n            // Authentication/authorization failed\r\n            microsoftTeams.authentication.notifyFailure(hashParams[\"error\"]);\r\n        } else if (hashParams[\"id_token\"]) {\r\n            // Success\r\n            microsoftTeams.authentication.notifySuccess();\r\n        } else {\r\n            // Unexpected condition: hash does not contain error or access_token parameter\r\n            microsoftTeams.authentication.notifyFailure(\"UnexpectedFailure\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleEnd;","// <copyright file=\"card.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Flex, Text, Image, Label } from '@fluentui/react-northstar'\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { IDiscoverResourceGroupsPost } from \"./discoverResourceGroups\";\r\nimport './card.scss';\r\n\r\ninterface ICardProps extends WithTranslation {\r\n    resourceGroupDetails: IDiscoverResourceGroupsPost;\r\n    tags: string;\r\n}\r\n\r\nclass Card extends React.Component<ICardProps> {\r\n    readonly localize: TFunction;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;        \r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"card-bg\">\r\n                <Flex gap=\"gap.smaller\" vAlign=\"center\">\r\n                    <Image className=\"card-img\" src={this.props.resourceGroupDetails.imageLink} data-testid=\"group-img\" />\r\n                </Flex>\r\n                <div className=\"card-body\">\r\n                    <Flex gap=\"gap.smaller\" column vAlign=\"start\">\r\n                        <Flex gap=\"gap.smaller\" className=\"title-flex\">\r\n                            <a href={this.props.resourceGroupDetails.groupLink} target=\"_blank\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n                                <Text className=\"card-title-text\" size=\"large\" content={this.props.resourceGroupDetails.groupName} weight=\"bold\" data-testid=\"group-name\" />\r\n                            </a>\r\n                        </Flex>\r\n                        <div className=\"footer-flex\">\r\n                            <Flex gap=\"gap.smaller\" className=\"tags-flex\">\r\n                                {\r\n                                    JSON.parse(this.props.tags).map((value: string, index: number) => {\r\n                                        if (value.trim().length > 0) {\r\n                                            return < Label className=\"tags-label-wrapper\" circular content={value.trim()} data-testid={\"group-tag\" + index} />\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </Flex>\r\n                            <Flex className=\"card-content-flex\" gap=\"gap.small\">\r\n                                <Text size=\"small\" className=\"card-content-text\" content={this.props.resourceGroupDetails.groupDescription} data-testid=\"group-desc\" />\r\n                            </Flex>\r\n                        </div>\r\n                    </Flex>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(Card)","// <copyright file=\"checkboxWrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Checkbox } from \"@fluentui/react-northstar\";\r\nimport \"../components/popup-menu/popupMenu.scss\";\r\n\r\ninterface ICheckboxProps {\r\n    title: JSX.Element;\r\n    index: number;\r\n    isChecked: boolean;\r\n    onChange: (key: number, isChecked: boolean) => void\r\n}\r\n\r\nconst CheckboxWrapper: React.FunctionComponent<ICheckboxProps> = props => {\r\n    return (\r\n        <div>\r\n            <Flex gap=\"gap.small\">\r\n                <Checkbox className=\"checkbox-wrapper\" label={props.title} key={props.index} checked={props.isChecked} onChange={(event, data: any) => props.onChange(props.index, data.checked)} />\r\n            </Flex>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckboxWrapper;","// <copyright file=\"popupMenuCheckboxes-content.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Button, Provider, Divider } from \"@fluentui/react-northstar\";\r\nimport { CloseIcon } from \"@fluentui/react-icons-northstar\";\r\nimport CheckboxWrapper from \"../checkboxWrapper\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ICheckBoxItem } from \"../FilterBar/filterBar\";\r\nimport \"./popupMenu.scss\";\r\n\r\ninterface IPopupMenuCheckboxesContentProps {\r\n    disableClear: boolean,\r\n    content: any,\r\n    onCheckboxStateChange: (checkboxState: Array<ICheckBoxItem>) => void\r\n}\r\n\r\nconst PopupMenuCheckboxesContent: React.FunctionComponent<IPopupMenuCheckboxesContentProps> = props => {\r\n    const localize = useTranslation().t;\r\n    const [data] = React.useState({ checkboxes: props.content.checkboxes });\r\n    const [filteredCheckboxes, setFilteredCheckboxes] = React.useState(props.content.checkboxes);\r\n    let [disableClear, setDisableClear] = React.useState(true);\r\n    let [checkBoxClicked, setCheckBoxClicked] = React.useState(false);\r\n\r\n    /**\r\n    *Updates particular checkbox's isChecked state and passes changed state back to parent component.\r\n    *@param key Unique key for checkbox which needs to be updated\r\n    *@param checked Boolean indicating checkbox current value\r\n    */\r\n    const onCheckboxValueChange = (key: number, checked: boolean) => {\r\n        let checkCount = 0;\r\n        setCheckBoxClicked(true);\r\n        let checkboxList = data.checkboxes.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.key === key) {\r\n                checkbox.isChecked = checked;\r\n            }\r\n            return checkbox;\r\n        });\r\n\r\n        checkboxList.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        })\r\n\r\n        if (checkCount > 0) {\r\n            setDisableClear(false);\r\n        }\r\n        else {\r\n            setDisableClear(true);\r\n        }\r\n\r\n        props.onCheckboxStateChange(checkboxList);\r\n    }\r\n\r\n    /**\r\n    *Sets all checkbox's isChecked to false to unselect all and passes changed state back to parent component.\r\n    */\r\n    const deSelectAll = () => {\r\n        let checkboxList = filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n            checkbox.isChecked = false\r\n            return checkbox;\r\n        });\r\n        setFilteredCheckboxes(checkboxList);\r\n        props.onCheckboxStateChange(checkboxList);\r\n        setDisableClear(true);\r\n        setCheckBoxClicked(true);\r\n    }\r\n\r\n    return (\r\n        <Provider>\r\n            <div className=\"content-items-wrapper\">\r\n                <div className=\"content-items-body\">\r\n                    <Flex gap=\"gap.small\" vAlign=\"center\" hAlign=\"end\">\r\n                        <Button disabled={checkBoxClicked ? disableClear : props.disableClear} className=\"clear-button\" icon={<CloseIcon />} size=\"small\" text onClick={() => deSelectAll()} content={localize(\"ClearAll\")} />\r\n                    </Flex>\r\n                    <Divider className=\"filter-popup-menu-divider\" />\r\n                    {\r\n                        filteredCheckboxes.map((checkbox: ICheckBoxItem) => {\r\n                            if (checkbox.title.trim().length) {\r\n                                return (\r\n                                    <CheckboxWrapper title={checkbox.checkboxLabel} isChecked={checkbox.isChecked} index={checkbox.key} onChange={(key, isChecked) => onCheckboxValueChange(key, isChecked)} />\r\n                                );\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default PopupMenuCheckboxesContent;","// <copyright file=\"popupMenuWrapper.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Popup, Button, Text } from \"@fluentui/react-northstar\";\r\nimport { ChevronDownIcon } from \"@fluentui/react-icons-northstar\";\r\nimport PopupMenuCheckboxesContent from \"./popupMenuCheckboxesContent\";\r\nimport { ICheckBoxItem } from \"../FilterBar/filterBar\";\r\nimport \"./popupMenu.scss\";\r\n\r\ninterface IPopupMenuWrapperProps {\r\n    title: string,\r\n    checkboxes?: Array<any>,\r\n    onCheckboxStateChange: (typeState: Array<any>) => void\r\n}\r\n\r\nconst PopupMenuWrapper: React.FunctionComponent<IPopupMenuWrapperProps> = props => {\r\n    const [popup, setPopup] = React.useState({ isOpen: false });\r\n    let [disableClear, setDisableClear] = React.useState(true);\r\n    const onFilterClick = () => {\r\n        let checkCount = 0;\r\n        let checkBox = props.checkboxes!;\r\n        checkBox.map((checkbox: ICheckBoxItem) => {\r\n            if (checkbox.isChecked) {\r\n                checkCount = checkCount + 1;\r\n            }\r\n        });\r\n        if (checkCount > 0) {\r\n            setDisableClear(false);\r\n        }\r\n        else {\r\n            setDisableClear(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Popup\r\n            open={popup.isOpen}\r\n            align=\"center\"\r\n            position=\"below\"\r\n            onOpenChange={(e, { open }: any) => setPopup({ isOpen: open })}\r\n            trigger={<Button className={`mobile-button ${popup.isOpen ? \"gray-background\" : \"no-background\"}`} onClick={() => onFilterClick()} content={<Text content={props.title} />} iconPosition=\"after\" icon={<ChevronDownIcon />} text />}\r\n            content={<PopupMenuCheckboxesContent disableClear={disableClear} content={{ checkboxes: props.checkboxes, title: props.title }} onCheckboxStateChange={props.onCheckboxStateChange} />}\r\n            trapFocus\r\n        />\r\n    );\r\n}\r\n\r\nexport default PopupMenuWrapper;","// <copyright file=\"appSettingsApi.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from './axiosJWTDecorator';\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nlet baseAxiosUrl = getBaseUrl() + '/api';\r\n\r\n/**\r\n* Method to get application configuration values.\r\n*/\r\nexport const getAppId = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/settings\";\r\n    return await axios.get(url);\r\n}","// <copyright file=\"filterBar.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { Flex, Input, Text, Button, AddIcon } from \"@fluentui/react-northstar\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport PopupMenuWrapper from \"../../components/popup-menu/popupMenuWrapper\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport Constants from \"../../constants/constants\";\r\nimport { SearchIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { Icon } from '@fluentui/react';\r\nimport { getAppId } from \"../../apis/appSettingsApi\";\r\nimport \"./filterbar.scss\";\r\nimport { getBaseUrl } from \"../../configVariables\";\r\n\r\nexport interface ICheckBoxItem {\r\n    id: string;\r\n    key: number;\r\n    title: string;\r\n    checkboxLabel: JSX.Element,\r\n    isChecked: boolean;\r\n}\r\n\r\ninterface IFilterBarProps extends WithTranslation {\r\n    tagsList: Array<string>;\r\n    locationsList: Array<string>;\r\n    commandBarSearchText: string;\r\n    onSearchInputChange: (searchString: string) => void;\r\n    onCreateGroupSubmit: (status: boolean) => void;\r\n    onLocationCheckboxStateChange: (currentValues: Array<ICheckBoxItem>) => void;\r\n    onTagsCheckboxStateChange: (currentValues: Array<ICheckBoxItem>) => void;\r\n}\r\n\r\ninterface IFilterBarState {\r\n    tagsList: Array<ICheckBoxItem>;\r\n    locationsList: Array<ICheckBoxItem>;\r\n    screenWidth: number;\r\n    isFilterEnabled: boolean;\r\n    hideFilter: boolean;\r\n}\r\n\r\nclass FilterBar extends React.Component<IFilterBarProps, IFilterBarState> {\r\n    localize: TFunction;\r\n    botId: string;\r\n    constructor(props: IFilterBarProps) {\r\n        super(props);\r\n        this.botId = \"\";\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            tagsList: this.props.tagsList.map((value: string, index: number) => {\r\n                return { id: value, isChecked: false, key: index, title: value, checkboxLabel: <Text content={value} /> };\r\n            }),\r\n            locationsList: this.props.locationsList.map((value: string, index: number) => {\r\n                return { id: value, isChecked: false, key: index, title: value, checkboxLabel: <Text content={value} /> };\r\n            }),\r\n            screenWidth: Constants.screenWidth,\r\n            isFilterEnabled: false,\r\n            hideFilter: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.resize.bind(this));\r\n        this.getAppSetting();\r\n        this.resize();\r\n    }\r\n\r\n    /**\r\n    *Get bot id from API\r\n    */\r\n    private getAppSetting = async () => {\r\n        let response = await getAppId();\r\n        if (response.data) {\r\n            this.botId = response.data.appId;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Invokes when screen is resized\r\n    */\r\n    resize = () => {\r\n        if (window.innerWidth !== this.state.screenWidth) {\r\n            this.setState({ screenWidth: window.innerWidth });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize.bind(this));\r\n    }\r\n\r\n    /**\r\n   *Sets state of 'Location' filter item when checkbox value changes.\r\n   *@param locationValues Array of 'location' checkboxes with updated user selection\r\n   */\r\n    private onLocationCheckboxStateChange = (locationValues: Array<ICheckBoxItem>) => {\r\n        this.setState({ locationsList: locationValues });\r\n        this.props.onLocationCheckboxStateChange(locationValues);\r\n    }\r\n\r\n    /**\r\n   *Sets state of 'Tags' filter item when checkbox value changes.\r\n   *@param tagsValues Array of 'tags' checkboxes with updated user selection\r\n   */\r\n    private onTagsCheckboxStateChange = (tagsValues: Array<ICheckBoxItem>) => {\r\n        this.setState({ tagsList: tagsValues });\r\n        this.props.onTagsCheckboxStateChange(tagsValues);\r\n    }\r\n\r\n    /**\r\n    * Method to show or hide filter bar when user clicks filter icon\r\n    */\r\n    private onFilterButtonClick = () => {\r\n        if (this.state.isFilterEnabled === false) {\r\n            this.setState({\r\n                isFilterEnabled: true,\r\n                hideFilter: false\r\n            })\r\n        }\r\n        else if (this.state.isFilterEnabled === true) {\r\n            this.setState({\r\n                isFilterEnabled: false,\r\n                hideFilter: true\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Method to handle create erg submit request\r\n    */\r\n    handleAddClick = () => {\r\n        microsoftTeams.tasks.startTask({\r\n            completionBotId: this.botId,\r\n            title: this.localize(\"NewERGHeader\"),\r\n            height: Constants.editTaskModuleHeight,\r\n            width: Constants.editTaskModuleWidth,\r\n            url: `${getBaseUrl()}/createNewGroup`,\r\n        }, this.submitHandler);\r\n    }\r\n\r\n    submitHandler = async () => {\r\n    };\r\n\r\n    /**\r\n    * Renders the component\r\n    */\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {this.state.screenWidth > Constants.screenWidth &&\r\n                    <div className=\"filter-bar\">\r\n                        <div>\r\n                            <Flex gap=\"gap.small\">\r\n                                <div className=\"filter-bar-title-container\">\r\n                                <Button icon={<AddIcon xSpacing=\"before\" size=\"smaller\" />}\r\n                                    content={this.localize(\"NewERGTitleText\")} onClick={this.handleAddClick} text />\r\n                                </div>\r\n                                <div className=\"filter-bar-item-container\" hidden={this.state.hideFilter}>\r\n                                    <PopupMenuWrapper title={this.localize(\"Location\")} checkboxes={this.state.locationsList} onCheckboxStateChange={this.onLocationCheckboxStateChange} />\r\n                                    <PopupMenuWrapper title={this.localize(\"Tags\")} checkboxes={this.state.tagsList} onCheckboxStateChange={this.onTagsCheckboxStateChange} />\r\n                                </div>\r\n                                <Flex.Item push>\r\n                                    <Flex>\r\n                                        <Button className=\"filter-button\" content={<Text content={this.localize(\"Filter\")} />} icon={this.state.isFilterEnabled ? <Icon iconName=\"FilterSolid\" className=\"filter-icon-filled\" /> : <Icon iconName=\"Filter\" className=\"filter-icon\" />} text onClick={this.onFilterButtonClick} />\r\n                                        <Input inverted fluid placeholder={this.localize(\"SearchPlaceholder\")} onChange={(event: any) => this.props.onSearchInputChange(event.target.value)} value={this.props.commandBarSearchText} data-testid=\"search-input\" />\r\n                                        <SearchIcon key=\"search\" className=\"discover-search-icon\" />\r\n                                    </Flex>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>}\r\n                {this.state.screenWidth <= Constants.screenWidth && <Flex gap=\"gap.small\" vAlign=\"start\" className=\"filter-bar-wrapper\">\r\n                    <Flex.Item grow>\r\n                        <Flex column gap=\"gap.small\" vAlign=\"stretch\">\r\n                            <Flex className=\"mobile-filterbar-title-wrapper\">\r\n                                <div className=\"title-container-mobile\">\r\n                                    <Text content={this.localize(\"NewERGTitleText\")} weight=\"semibold\" />\r\n                                </div>\r\n                                <Button className=\"filter-button\" content={<Text content={this.localize(\"Filter\")} />} icon={this.state.isFilterEnabled ? <Icon iconName=\"FilterSolid\" className=\"filter-icon-filled\" /> : <Icon iconName=\"Filter\" className=\"filter-icon\" />} text onClick={this.onFilterButtonClick} />\r\n                                <div className=\"searchbar-wrapper-mobile\">\r\n                                    <Input className=\"searchbar-wrapper-mobile\" inverted fluid placeholder={this.localize(\"SearchPlaceholder\")} onChange={(event: any) => this.props.onSearchInputChange(event.target.value)} value={this.props.commandBarSearchText} />\r\n                                    <SearchIcon key=\"search\" className=\"discover-search-icon-mobile\" />\r\n                                </div>\r\n                            </Flex>\r\n                            <Flex className=\"mobile-filterbar-wrapper\">\r\n                                <Flex hidden={this.state.hideFilter}>\r\n                                    <PopupMenuWrapper title={this.localize(\"Location\")} checkboxes={this.state.locationsList} onCheckboxStateChange={this.onLocationCheckboxStateChange} />\r\n                                    <PopupMenuWrapper title={this.localize(\"Tags\")} checkboxes={this.state.tagsList} onCheckboxStateChange={this.onTagsCheckboxStateChange} />\r\n                                </Flex>\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Flex.Item>\r\n                </Flex>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTranslation()(FilterBar)","// <copyright file=\"discoverResourceGroups.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Loader, Text } from \"@fluentui/react-northstar\";\r\nimport { EyeIcon } from \"@fluentui/react-icons-northstar\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport NotificationMessage from \"../NotificationMessage/notificationMessage\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from \"./card\";\r\nimport FilterBar from \"../FilterBar/filterBar\";\r\nimport { ICheckBoxItem } from \"../FilterBar/filterBar\";\r\nimport { getSearchableResourceGroupsAsync } from '../../apis/employeeResourceGroupApi';\r\nimport './card.scss';\r\nexport interface IDiscoverResourceGroupsPost {\r\n    groupType: string;\r\n    groupName: string;\r\n    groupDescription: string;\r\n    imageLink: string;\r\n    groupLink: string;\r\n    tags: string;\r\n    location: string;\r\n    groupId: string;\r\n}\r\n\r\nexport interface IDiscoverResourceGroupsState {\r\n    loader: boolean;\r\n    resourceGroups: Array<IDiscoverResourceGroupsPost>;\r\n    tagsList: Array<string>;\r\n    locationsList: Array<string>;\r\n    selectedLocationsList: Array<string>;\r\n    selectedTagsList: Array<string>;\r\n    searchText: string;\r\n    alertMessage: string;\r\n    alertStatus: boolean;\r\n    showAlert: boolean;\r\n}\r\n\r\nclass DiscoverResourceGroups extends React.Component<WithTranslation, IDiscoverResourceGroupsState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            loader: true,\r\n            resourceGroups: [],\r\n            tagsList: [],\r\n            locationsList: [],\r\n            selectedLocationsList: [],\r\n            selectedTagsList: [],\r\n            searchText: \"\",\r\n            alertMessage: \"\",\r\n            alertStatus: true,\r\n            showAlert: false,\r\n        }\r\n    }\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        this.discoverResourceGroupsAsync();\r\n    }\r\n\r\n    /**\r\n    * Method to get searchable employee resource groups.\r\n    */\r\n    private discoverResourceGroupsAsync = async () => {\r\n        const response = await getSearchableResourceGroupsAsync();\r\n        if (response.status === 200 && response.data) {\r\n            this.setState({\r\n                resourceGroups: response.data\r\n            }\r\n            );\r\n        }\r\n        this.setFilterBarValues();\r\n        this.setState({\r\n            loader: false\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Show alert on submit of create resource group.\r\n    *@param status flag to show success/failed message.\r\n    */\r\n    onCreateGroupSubmit = async (status: boolean) => {\r\n        this.showAlert(this.localize(\"GroupCreatedSuccessMessage\"), status);\r\n    }\r\n\r\n    /**\r\n    *Sets state for showing alert notification.\r\n    *@param content Notification message\r\n    *@param type Boolean value indicating 1- Success 2- Error\r\n    */\r\n    showAlert = (content: string, type: boolean) => {\r\n        this.setState({ alertMessage: content, alertStatus: type, showAlert: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ showAlert: false })\r\n            }, 4000);\r\n        });\r\n    }\r\n\r\n    /**\r\n    *Sets state for hiding alert notification.\r\n    */\r\n    hideAlert = () => {\r\n        this.setState({ showAlert: false })\r\n    }\r\n\r\n    /**\r\n    * Method to set unique filter bar values.\r\n    */\r\n    public setFilterBarValues = () => {\r\n        const locations = new Array<string>();\r\n        const tags = new Array<string>();\r\n        if (this.state.resourceGroups.length > 0) {\r\n            this.state.resourceGroups!.forEach((value: IDiscoverResourceGroupsPost, index) => {\r\n                if (!locations.find(item => item.toUpperCase() === value.location.toUpperCase())) {\r\n                    locations.push(value.location);\r\n                }\r\n                JSON.parse(value.tags).forEach((tag: string) => {\r\n                    if (!tags.find(item => item.toUpperCase() === tag.toUpperCase())) {\r\n                        tags.push(tag);\r\n                    }\r\n                });\r\n            });\r\n\r\n            this.setState({\r\n                locationsList: locations.sort(),\r\n                tagsList: tags.sort(),\r\n            }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Filter resource groups based on 'location' checkbox selection.\r\n    *@param selectedCheckboxes User selected checkbox array\r\n    */\r\n    onLocationCheckboxStateChange = async (selectedCheckboxes: Array<ICheckBoxItem>) => {\r\n        let selectedLocations = selectedCheckboxes.filter(value => value.isChecked).map((postType: ICheckBoxItem) => { return postType.id.toString().toUpperCase().trim() });\r\n        this.setState({\r\n            selectedLocationsList: selectedLocations\r\n        });\r\n    }\r\n\r\n    /**\r\n    *Filter resource groups based on 'tags' checkbox selection.\r\n    *@param selectedCheckboxes User selected checkbox array\r\n    */\r\n    onTagsCheckboxStateChange = async (selectedCheckboxes: Array<ICheckBoxItem>) => {\r\n        let selectedTags = selectedCheckboxes.filter(value => value.isChecked).map((postType: ICheckBoxItem) => { return postType.id.toString().toUpperCase().trim() });\r\n        await this.setState({\r\n            selectedTagsList: selectedTags\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Method to set search text given in the search box.\r\n    */\r\n    public handleSearchInputChange = async (searchText: string) => {\r\n        await this.setState({\r\n            searchText: searchText\r\n        })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"container-div\">\r\n                    <div className=\"container-subdiv\">\r\n                        <div className=\"loader\">\r\n                            <Loader />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            let resourceGroups = this.state.selectedLocationsList.length > 0\r\n                ? this.state.resourceGroups.filter(group => this.state.selectedLocationsList.includes(group.location.toUpperCase()))\r\n                : this.state.resourceGroups;\r\n\r\n            if (this.state.selectedTagsList.length > 0) {\r\n                resourceGroups = resourceGroups.filter(group => {\r\n                    return JSON.parse(group.tags).some((tag: string) => {\r\n                        return this.state.selectedTagsList.includes(tag.toUpperCase());\r\n                    })\r\n                });\r\n            }\r\n\r\n            if (this.state.searchText !== \"\" || this.state.searchText !== null) {\r\n                resourceGroups = resourceGroups.filter(group => ((group.groupName.toUpperCase().indexOf(this.state.searchText.toUpperCase()) !== -1)\r\n                    || (group.groupDescription.toUpperCase().indexOf(this.state.searchText.toUpperCase()) !== -1)))\r\n            }\r\n\r\n            const cards = new Array<any>();\r\n            // Cards component array to be rendered in grid.\r\n            resourceGroups.forEach((value: IDiscoverResourceGroupsPost) => {\r\n                cards.push(<Col lg={3} sm={6} md={4} className=\"grid-column d-flex justify-content-center\">\r\n                    <Card resourceGroupDetails={value} tags={value.tags} />\r\n                </Col>)\r\n            });\r\n            let scrollViewStyle = { height: \"92vh\" };\r\n            return (\r\n                <div className=\"site-div\">\r\n                    <div className=\"site-subdiv-cardview\">\r\n                        <Container fluid className=\"container-fluid-overriden\">\r\n                            <NotificationMessage\r\n                                onClose={this.hideAlert}\r\n                                showAlert={this.state.showAlert}\r\n                                content={this.state.alertMessage}\r\n                                notificationStatus={this.state.alertStatus}                                \r\n                            />\r\n                            <FilterBar\r\n                                tagsList={this.state.tagsList}\r\n                                locationsList={this.state.locationsList}\r\n                                commandBarSearchText={this.state.searchText}\r\n                                onSearchInputChange={this.handleSearchInputChange}\r\n                                onLocationCheckboxStateChange={this.onLocationCheckboxStateChange}\r\n                                onTagsCheckboxStateChange={this.onTagsCheckboxStateChange}\r\n                                onCreateGroupSubmit={this.onCreateGroupSubmit}\r\n                            />\r\n                            <div className=\"scroll-view\" style={scrollViewStyle}>\r\n                                <Row>\r\n                                    {\r\n                                        cards.length > 0 ? cards : <div className=\"no-post-added-container\">\r\n                                            <div className=\"app-logo\">\r\n                                                <EyeIcon size=\"largest\" />\r\n                                            </div>\r\n                                            <div className=\"no-data-preview\">\r\n                                                <Text content={this.localize(\"NoResultsText\")} />\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </Row>\r\n                            </div>\r\n                        </Container>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(DiscoverResourceGroups)","// <copyright file=\"createNewGroup.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Text, Flex, Label, Input, Checkbox, Loader, Button, Dropdown, CloseIcon, InfoIcon, Alert } from \"@fluentui/react-northstar\";\r\nimport { TFunction } from \"i18next\";\r\nimport { EmployeeResourceGroupEntity } from \"../../models/employeeResourceGroup\";\r\nimport { createNewGroup, getTeamDetails } from \"../../apis/employeeResourceGroupApi\";\r\nimport Constants from \"../../constants/constants\";\r\nimport { GroupType } from \"../../constants/groupType\";\r\nimport './group.scss';\r\n\r\ninterface IState {\r\n    loading: boolean,\r\n    theme: string;\r\n    tagValidation: ITagValidationParameters;\r\n    tagsList: Array<string>;\r\n    tag: string;\r\n    groupType: string;\r\n    groupName: string;\r\n    groupDescription: string;\r\n    groupLink: string;\r\n    teamName: string;\r\n    teamDescription: string;\r\n    teamLink: string;\r\n    imageLink: string;\r\n    location: string;\r\n    searchEnabled: boolean;\r\n    isGroupTypePresent: boolean;\r\n    isGroupNamePresent: boolean;\r\n    isGroupDescriptionPresent: boolean;\r\n    isGroupLinkPresent: boolean;\r\n    isGroupLinkValid: boolean;\r\n    isTeamNamePresent: boolean;\r\n    isTeamDescriptionPresent: boolean;\r\n    isTeamLinkPresent: boolean;\r\n    isImageLinkPresent: boolean;\r\n    isLocationPresent: boolean;\r\n    isTeamLinkValid: boolean;\r\n    isImageLinkValid: boolean;\r\n    isExternalSelected: boolean;\r\n    isTeamsSelected: boolean;\r\n    errorMessage: string;\r\n    submitLoading: boolean;\r\n    selectedGroupType: string;\r\n}\r\n\r\nexport interface ITagValidationParameters {\r\n    isEmpty: boolean;\r\n    isExisting: boolean;\r\n    isLengthValid: boolean;\r\n    isTagsCountValid: boolean;\r\n    containsSemicolon: boolean;\r\n}\r\n\r\nclass CreateNewGroup extends React.Component<WithTranslation, IState> {\r\n    localize: TFunction;\r\n    userObjectId: string = \"\";\r\n    \r\n    constructor(props: Readonly<WithTranslation>) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            loading: true,\r\n            theme: \"\",\r\n            tagsList: [],\r\n            tag: \"\",\r\n            tagValidation: { isEmpty: false, isExisting: false, isLengthValid: true, isTagsCountValid: true, containsSemicolon: false },\r\n            groupType: \"\",\r\n            selectedGroupType: \"\",\r\n            groupName: \"\",\r\n            groupDescription: \"\",\r\n            groupLink: \"\",\r\n            teamName: \"\",\r\n            teamDescription: \"\",\r\n            teamLink: \"\",\r\n            imageLink: \"\",\r\n            location: \"\",\r\n            searchEnabled: false,\r\n            isGroupTypePresent: true,\r\n            isGroupNamePresent: true,\r\n            isGroupDescriptionPresent: true,\r\n            isGroupLinkPresent: true,\r\n            isGroupLinkValid: true,\r\n            isTeamNamePresent: true,\r\n            isTeamDescriptionPresent: true,\r\n            isTeamLinkPresent: true,\r\n            isImageLinkPresent: true,\r\n            isLocationPresent: true,\r\n            isTeamLinkValid: true,\r\n            isImageLinkValid: true,\r\n            isExternalSelected: false,\r\n            isTeamsSelected: false,\r\n            errorMessage: \"\",\r\n            submitLoading: false,\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.userObjectId = context.userObjectId!;\r\n            this.setState({\r\n                theme: context.theme!,\r\n                loading: false\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n    *Submit new employee resource details\r\n    */\r\n    private handleSubmit = () => {\r\n        if (this.checkIfSubmitAllowed()) {\r\n            this.setState({ submitLoading: true });\r\n            let groupDetails: EmployeeResourceGroupEntity = {\r\n                groupType: this.state.selectedGroupType,\r\n                groupName: this.state.selectedGroupType === GroupType.external ? this.state.groupName : this.state.teamName,\r\n                groupDescription: this.state.selectedGroupType === GroupType.external ? this.state.groupDescription : this.state.teamDescription,\r\n                groupLink: this.state.selectedGroupType === GroupType.external ? this.state.groupLink : this.state.teamLink,\r\n                imageLink: this.state.imageLink,\r\n                location: this.state.location,\r\n                includeInSearchResults: false,\r\n                tags: JSON.stringify(this.state.tagsList),\r\n            }\r\n\r\n            // Post group details\r\n            this.createNewEmployeeResourceGroup(groupDetails);\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Create new group from API\r\n    */\r\n    private async createNewEmployeeResourceGroup(groupDetails: any) {\r\n        try {\r\n            let response = await createNewGroup(groupDetails);\r\n            if (response.status === 201 && response.data) {\r\n                this.setState({ submitLoading: false, errorMessage: \"\" });\r\n                let toBot =\r\n                {\r\n                    command: Constants.groupCreatedBotCommand,\r\n                    GroupId: this.state.searchEnabled ? response.data.groupId : null,\r\n                };\r\n                microsoftTeams.tasks.submitTask(toBot);\r\n            }\r\n            else {\r\n                // TODO: will show generic error message once integrate with discover ERG page\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (error.response.status === 400 || error.response.status === 403) {\r\n                this.setState({ submitLoading: false, errorMessage: error.response.data.value });\r\n            }\r\n            else {\r\n                // TODO: will show generic error message once integrate with discover ERG page\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Validate input parameters\r\n    */\r\n    private checkIfSubmitAllowed = () => {\r\n        if (this.isNullOrWhiteSpace(this.state.groupType)) {\r\n            this.setState({ isGroupTypePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.external && this.isNullOrWhiteSpace(this.state.groupName)) {\r\n            this.setState({ isGroupNamePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.external && this.isNullOrWhiteSpace(this.state.groupDescription)) {\r\n            this.setState({ isGroupDescriptionPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.external && this.isNullOrWhiteSpace(this.state.groupLink)) {\r\n            this.setState({ isGroupLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.teams && this.isNullOrWhiteSpace(this.state.teamLink)) {\r\n            this.setState({ isTeamLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.teams && this.isNullOrWhiteSpace(this.state.teamName)) {\r\n            this.setState({ isTeamNamePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.teams && this.isNullOrWhiteSpace(this.state.teamDescription)) {\r\n            this.setState({ isTeamDescriptionPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.selectedGroupType === GroupType.teams && this.state.errorMessage === this.localize('TeamNotExists')) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isNullOrWhiteSpace(this.state.imageLink)) {\r\n            this.setState({ isImageLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.isNullOrWhiteSpace(this.state.location)) {\r\n            this.setState({ isLocationPresent: false });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *Checks for null or white space\r\n    */\r\n    private isNullOrWhiteSpace = (input: string): boolean => {\r\n        return !input || !input.trim();\r\n    }\r\n\r\n    /**\r\n\t*Check if tag is valid\r\n\t*/\r\n    private checkIfTagIsValid = () => {        \r\n        let validationParams: ITagValidationParameters = { isEmpty: false, isLengthValid: true, isExisting: false, isTagsCountValid: false, containsSemicolon: false };\r\n        if (this.state.tag.trim() === \"\") {\r\n            validationParams.isEmpty = true;\r\n        }\r\n\r\n        if (this.state.tag.length > Constants.stateTagMaxLength) {\r\n            validationParams.isLengthValid = false;\r\n        }\r\n\r\n        let tags = this.state.tagsList;\r\n        let isTagExist = tags.find(tag => tag.toLowerCase() === this.state.tag.toLowerCase()); \r\n\r\n        if (this.state.tag.split(\";\").length > 1) {\r\n            validationParams.containsSemicolon = true;\r\n        }\r\n\r\n        if (isTagExist) {\r\n            validationParams.isExisting = true;\r\n        }\r\n\r\n        if (this.state.tagsList.length < Constants.stateTagMaxCount) {\r\n            validationParams.isTagsCountValid = true;\r\n        }\r\n\r\n        this.setState({ tagValidation: validationParams });\r\n\r\n        if (!validationParams.isEmpty && !validationParams.isExisting && validationParams.isLengthValid && validationParams.isTagsCountValid && !validationParams.containsSemicolon) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n\t*Sets state of tagsList by removing tag using its index.\r\n\t*@param index Index of tag to be deleted.\r\n\t*/\r\n    private onTagRemoveClick = (index: number) => {\r\n        let tags = this.state.tagsList;\r\n        tags.splice(index, 1);\r\n        this.setState({ tagsList: tags });\r\n    }\r\n\r\n    /**\r\n    *Returns text component containing error message for empty tag input field\r\n    */\r\n    private getTagError = () => {\r\n        if (this.state.tagValidation.isEmpty) {\r\n            return (<Text content={this.localize(\"EmptyTagError\")} error size=\"small\" />);\r\n        }\r\n        else if (!this.state.tagValidation.isLengthValid) {\r\n            return (<Text content={this.localize(\"TagLengthError\")} error size=\"small\" />);\r\n        }\r\n        else if (this.state.tagValidation.isExisting) {\r\n            return (<Text content={this.localize(\"SameTagExistsError\")} error size=\"small\" />);\r\n        }\r\n        else if (!this.state.tagValidation.isTagsCountValid) {\r\n            return (<Text content={this.localize(\"TagsCountError\")} error size=\"small\" />);\r\n        }\r\n        else if (this.state.tagValidation.containsSemicolon) {\r\n            return (<Text content={this.localize(\"SemicolonTagError\")} error size=\"small\" />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n\t*Sets state of tagsList by adding new tag.\r\n\t*/\r\n    private onTagAddClick = () => {\r\n        if (this.checkIfTagIsValid()) {\r\n            let tagList = this.state.tagsList;\r\n            tagList.push(this.state.tag.toLowerCase());\r\n            this.setState({ tagsList: tagList, tag: \"\" });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Adds tag when enter key is pressed\r\n\t* @param event Object containing event details\r\n\t*/\r\n    private onTagKeyUp = (event: any) => {\r\n        if (event.key === 'Enter') {\r\n            this.onTagAddClick();\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets tag state.\r\n\t*@param tag Tag string\r\n\t*/\r\n    private onTagChange = (tag: string) => {\r\n        this.setState({ tag: tag })\r\n    }\r\n\r\n    /**\r\n    *Sets group type state.\r\n    *@param groupType groupType string\r\n    */\r\n    private onGroupTypeChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value === this.localize(\"Teams\")) {\r\n            this.setState({ selectedGroupType: GroupType.teams, groupType: itemsData.value, isGroupTypePresent: true, isTeamsSelected: true, isExternalSelected: false });\r\n        }\r\n        else {\r\n            this.setState({ selectedGroupType: GroupType.external, groupType: itemsData.value, isGroupTypePresent: true, isExternalSelected: true, isTeamsSelected: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets group name state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onGroupNameChange = (value: string) => {\r\n        this.setState({ groupName: value, isGroupNamePresent: true });\r\n    }\r\n\r\n    /**\r\n   *Sets group description state.\r\n   *@param description Description string\r\n   */\r\n    private onGroupDescriptionChange = (description: string) => {\r\n        this.setState({ groupDescription: description, isGroupDescriptionPresent: true });\r\n    }\r\n\r\n    /**\r\n    *Sets group link state.\r\n    *@param event object\r\n    */\r\n    private onGroupLinkChange = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\")))) {\r\n            this.setState({\r\n                isGroupLinkValid: false, isGroupLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                groupLink: event.target.value, isGroupLinkValid: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets team name state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onTeamNameChange = (value: string) => {\r\n        this.setState({ teamName: value, isTeamNamePresent: true });\r\n    }\r\n\r\n    /**\r\n   *Sets team description state.\r\n   *@param description Description string\r\n   */\r\n    private onTeamDescriptionChange = (description: string) => {\r\n        this.setState({ teamDescription: description, isTeamDescriptionPresent: true });\r\n    }\r\n\r\n    /**\r\n    *Sets team link state.\r\n    *@param event object\r\n    */\r\n    private onTeamLinkChange = async (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://teams.microsoft.com/l/team\")))) {\r\n            this.setState({\r\n                isTeamLinkValid: false, isTeamLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                teamLink: event.target.value, isTeamLinkValid: true\r\n            });\r\n\r\n            // Get groupId from team link\r\n            var params = url.split(\"?\")[1];\r\n            let groupId = params.split(\"&\")[0];\r\n            let response = await getTeamDetails(groupId.split(\"=\")[1]);\r\n            if (response.status === 200 && response.data) {\r\n                this.setState({\r\n                    teamName: response.data.name, teamDescription: response.data.description\r\n                });\r\n            }\r\n            else if (response.status === 204) {\r\n                this.setState({\r\n                    errorMessage: this.localize('TeamNotExists')\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Sets image link state.\r\n    *@param event object\r\n    */\r\n    private onImageLinkChange = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\") || (url.startsWith(\"data:image/png;base64,\")) || (url.startsWith(\"data:image/jpeg;base64,\")) || (url.startsWith(\"data:image/gif;base64,\"))))) {\r\n            this.setState({\r\n                isImageLinkValid: false, isImageLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                imageLink: event.target.value, isImageLinkValid: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets location state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onLocationChange = (value: string) => {\r\n        this.setState({ location: value, isLocationPresent: true });\r\n    }\r\n\r\n    /**\r\n     * Handling check box change event.\r\n     * @param isChecked | boolean value.\r\n     */\r\n    private onSearchEnableChange = (isChecked: boolean): void => {\r\n        this.setState({ searchEnabled: !isChecked });\r\n    }\r\n\r\n    /**\r\n   *Returns text component containing error message for failed name field validation\r\n   *@param {boolean} isValuePresent Indicates whether value is present\r\n   */\r\n    private getRequiredFieldError = (isValuePresent: boolean) => {\r\n        if (!isValuePresent) {\r\n            return (<Text data-testid=\"empty_validation\" content={this.localize('RequiredFieldMessage')} error size=\"small\" />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n   *Returns text component containing error message for failed name field validation\r\n   *@param {boolean} isValuePresent Indicates whether value is present\r\n   */\r\n    private getInvalidUrlError = (isValuePresent: boolean) => {\r\n        if (!isValuePresent) {\r\n            return (<Text data-testid=\"url_validation\" content={this.localize('InvalidUrlMessage')} error size=\"small\" />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n    */\r\n    public render(): JSX.Element {\r\n        if (!this.state.loading) {\r\n            return (\r\n                <div className={this.state.theme === \"default\" ? \"backgroundcolor\" : \"\"} >\r\n                    <Flex className=\"tab-container\" column>\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"group_type_field\" size=\"small\" content={this.localize(\"GroupType\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isGroupTypePresent)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Dropdown\r\n                            className=\"between-space\"\r\n                            fluid\r\n                            placeholder={this.localize(\"GroupTypePlaceHolder\")}\r\n                            items={[\r\n                                this.localize(\"External\"),\r\n                                this.localize(\"Teams\"),\r\n                            ]}\r\n                            value={this.state.groupType}\r\n                            onChange={this.onGroupTypeChange}\r\n                            data-testid=\"group_type_dropdown\"\r\n                        />\r\n                        {this.state.isExternalSelected && <div>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_name_field\" size=\"small\" content={this.localize(\"GroupName\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupNamePresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthName}\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupNamePlaceHolder\")}\r\n                                value={this.state.groupName}\r\n                                onChange={(event: any) => this.onGroupNameChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_description_field\" size=\"small\" content={this.localize(\"GroupDescription\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupDescriptionPresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthDescription}\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupDescriptionPlaceHolder\")}\r\n                                value={this.state.groupDescription}\r\n                                onChange={(event: any) => this.onGroupDescriptionChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_link_field\" size=\"small\" content={this.localize(\"GroupLink\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupLinkPresent)}\r\n                                </Flex.Item>\r\n                                <Flex.Item push>\r\n                                    {this.getInvalidUrlError(this.state.isGroupLinkValid)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupLinkPlaceHolder\")}\r\n                                value={this.state.groupLink}\r\n                                onChange={this.onGroupLinkChange}\r\n                            />\r\n                        </div>}\r\n                        {this.state.isTeamsSelected && <div>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_link_field\" size=\"small\" content={this.localize(\"TeamLink\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamLinkPresent)}\r\n                                </Flex.Item>\r\n                                <Flex.Item push>\r\n                                    {this.getInvalidUrlError(this.state.isTeamLinkValid)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamLinkPlaceHolder\")}\r\n                                value={this.state.teamLink}\r\n                                onChange={this.onTeamLinkChange}\r\n                            />\r\n                            < Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_name_field\" size=\"small\" content={this.localize(\"TeamName\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamNamePresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthName}\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamNamePlaceHolder\")}\r\n                                value={this.state.teamName}\r\n                                onChange={(event: any) => this.onTeamNameChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_description_field\" size=\"small\" content={this.localize(\"TeamDescription\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamDescriptionPresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthDescription}\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamDescriptionPlaceHolder\")}\r\n                                value={this.state.teamDescription}\r\n                                onChange={(event: any) => this.onTeamDescriptionChange(event.target.value)}\r\n                            />\r\n                        </div>}\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"image_link_field\" size=\"small\" content={this.localize(\"ImageLink\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isImageLinkPresent)}\r\n                            </Flex.Item>\r\n                            <Flex.Item push>\r\n                                {this.getInvalidUrlError(this.state.isImageLinkValid)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Input\r\n                            className=\"between-space\"\r\n                            fluid\r\n                            placeholder={this.localize(\"ImageLinkPlaceHolder\")}\r\n                            value={this.state.imageLink}\r\n                            onChange={this.onImageLinkChange}\r\n                            data-testid=\"image_url\"\r\n                        />\r\n                        <div>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"tags_field\" size=\"small\" content={this.localize(\"Tags\")} />\r\n                                <Flex.Item push>\r\n                                    <div>\r\n                                        {this.getTagError()}\r\n                                    </div>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                placeholder={this.localize(\"TagsPlaceHolder\")}\r\n                                fluid\r\n                                value={this.state.tag}\r\n                                onKeyDown={this.onTagKeyUp}\r\n                                onChange={(event: any) => this.onTagChange(event.target.value)}\r\n                            />\r\n                            <Flex>\r\n                                <div>\r\n                                    {\r\n                                        this.state.tagsList.map((value: string, index) => {\r\n                                            if (value.trim().length > 0) {\r\n                                                return (\r\n                                                    <Label\r\n                                                        circular\r\n                                                        className={this.state.theme === \"default\" ? \"tags-label-wrapper\" : \"tags-label-wrapper-dark\"}\r\n                                                        content={<Text content={value.trim()} title={value.trim()} size=\"medium\" />}\r\n                                                        icon={<CloseIcon outline key={index} onClick={() => this.onTagRemoveClick(index)} />}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </Flex>\r\n                        </div>\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"location_field\" size=\"small\" content={this.localize(\"Location\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isLocationPresent)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Input\r\n                            className=\"between-space\"\r\n                            maxLength={Constants.stateLocationMaxLength}\r\n                            fluid\r\n                            placeholder={this.localize(\"LocationPlaceHolder\")}\r\n                            value={this.state.location}\r\n                            onChange={(event: any) => this.onLocationChange(event.target.value)}\r\n                        />\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"searchenabled_field\" className=\"margin-space\" content={this.localize(\"SearchEnabled\")} />\r\n                            <InfoIcon outline xSpacing=\"after\" title={this.localize(\"TagInfo\")} size=\"small\" />\r\n                            <Checkbox toggle checked={this.state.searchEnabled} onChange={() => this.onSearchEnableChange(this.state.searchEnabled)} />\r\n                        </Flex>\r\n                    </Flex>\r\n                    <Flex className=\"tab-footer\" hAlign=\"end\" >\r\n                        <Flex.Item push>\r\n                            <Text className=\"error-info\" content={this.state.errorMessage} error size=\"medium\" />\r\n                        </Flex.Item>\r\n                        <Button primary content={this.localize(\"SubmitText\")}\r\n                            onClick={this.handleSubmit}\r\n                            disabled={this.state.submitLoading}\r\n                            loading={this.state.submitLoading} data-testid=\"submit_button\" />\r\n                    </Flex>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return <Loader />\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(CreateNewGroup)","// <copyright file=\"createNewGroup.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport * as React from \"react\";\r\nimport { WithTranslation, withTranslation } from \"react-i18next\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { Text, Flex, Label, Input, Checkbox, Loader, Button, Dropdown, CloseIcon, InfoIcon } from \"@fluentui/react-northstar\";\r\nimport { TFunction } from \"i18next\";\r\nimport { ResourceGroupResponse } from \"../../models/employeeResourceGroup\";\r\nimport { getTeamDetails, getEmployeeResourceGroup, updateEmployeeResourceGroup } from \"../../apis/employeeResourceGroupApi\";\r\nimport { GroupType, MatchingFrequencyType } from \"../../constants/groupType\";\r\nimport Constants from \"../../constants/constants\";\r\nimport './group.scss';\r\n\r\ninterface IState {\r\n    loading: boolean,\r\n    theme: string;\r\n    tagValidation: ITagValidationParameters;\r\n    tagsList: Array<string>;\r\n    tag: string;\r\n    groupId: string;\r\n    groupType: string;\r\n    groupName: string;\r\n    groupDescription: string;\r\n    groupLink: string;\r\n    teamName: string;\r\n    teamDescription: string;\r\n    teamLink: string;\r\n    imageLink: string;\r\n    location: string;\r\n    searchEnabled: boolean;\r\n    isGroupTypePresent: boolean;\r\n    isGroupNamePresent: boolean;\r\n    isGroupDescriptionPresent: boolean;\r\n    isGroupLinkPresent: boolean;\r\n    isGroupLinkValid: boolean;\r\n    isTeamNamePresent: boolean;\r\n    isTeamDescriptionPresent: boolean;\r\n    isTeamLinkPresent: boolean;\r\n    isImageLinkPresent: boolean;\r\n    isLocationPresent: boolean;\r\n    isTeamLinkValid: boolean;\r\n    isImageLinkValid: boolean;\r\n    isExternalSelected: boolean;\r\n    isTeamsSelected: boolean;\r\n    errorMessage: string;\r\n    submitLoading: boolean;\r\n    profileMatchFrequency: any;\r\n    frequency: string;\r\n    isProfileMatchingEnabled: boolean;\r\n    isFrequencyTypeMonthly: boolean;\r\n}\r\n\r\nexport interface ITagValidationParameters {\r\n    isEmpty: boolean;\r\n    isExisting: boolean;\r\n    isLengthValid: boolean;\r\n    isTagsCountValid: boolean;\r\n    containsSemicolon: boolean;\r\n}\r\n\r\nclass UpdateResouceGroup extends React.Component<WithTranslation, IState> {\r\n    localize: TFunction;\r\n    userObjectId: string = \"\";\r\n\r\n    constructor(props: Readonly<WithTranslation>) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            loading: true,\r\n            theme: \"\",\r\n            tagsList: [],\r\n            tag: \"\",\r\n            tagValidation: { isEmpty: false, isExisting: false, isLengthValid: true, isTagsCountValid: true, containsSemicolon: false },\r\n            groupId: \"\",\r\n            groupType: \"\",\r\n            groupName: \"\",\r\n            groupDescription: \"\",\r\n            groupLink: \"\",\r\n            teamName: \"\",\r\n            teamDescription: \"\",\r\n            teamLink: \"\",\r\n            imageLink: \"\",\r\n            location: \"\",\r\n            searchEnabled: false,\r\n            isGroupTypePresent: true,\r\n            isGroupNamePresent: true,\r\n            isGroupDescriptionPresent: true,\r\n            isGroupLinkPresent: true,\r\n            isGroupLinkValid: true,\r\n            isTeamNamePresent: true,\r\n            isTeamDescriptionPresent: true,\r\n            isTeamLinkPresent: true,\r\n            isImageLinkPresent: true,\r\n            isLocationPresent: true,\r\n            isTeamLinkValid: true,\r\n            isImageLinkValid: true,\r\n            isExternalSelected: false,\r\n            isTeamsSelected: false,\r\n            errorMessage: \"\",\r\n            submitLoading: false,\r\n            profileMatchFrequency: \"\",\r\n            frequency: \"\",\r\n            isProfileMatchingEnabled: true,\r\n            isFrequencyTypeMonthly: true,\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.userObjectId = context.userObjectId!;\r\n            this.setState({\r\n                theme: context.theme!,\r\n            });\r\n        });\r\n\r\n        let params = this.props.match.params;\r\n        if ('id' in params) {\r\n            let id = params['id'];\r\n            await this.getResourceGroup(id);\r\n            this.setState({\r\n                loading: false,\r\n                groupId: id\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n   * Method to get employee resource group details.\r\n   */\r\n    private getResourceGroup = async (id: string) => {\r\n        const response = await getEmployeeResourceGroup(id);\r\n        if (response.status === 200 && response.data) {\r\n            let tags = new Array<string>();\r\n            JSON.parse(response.data.tags).forEach((tag: string) => { tags.push(tag) });\r\n            this.setState({\r\n                groupType: response.data.groupType,\r\n                isTeamsSelected: response.data.groupType === GroupType.teams,\r\n                isExternalSelected: response.data.groupType !== GroupType.teams,\r\n                imageLink: response.data.imageLink,\r\n                tagsList: tags,\r\n                location: response.data.location,\r\n                searchEnabled: response.data.includeInSearchResults,\r\n                profileMatchFrequency: response.data.profileMatchFrequency,\r\n                isProfileMatchingEnabled: response.data.isProfileMatchingEnabled,\r\n                isFrequencyTypeMonthly: response.data.matchingFrequency === MatchingFrequencyType.monthly,\r\n            });\r\n            if (response.data.groupType !== GroupType.teams) {\r\n                this.setState({\r\n                    groupName: response.data.groupName,\r\n                    groupDescription: response.data.groupDescription,\r\n                    groupLink: response.data.groupLink\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    teamName: response.data.groupName,\r\n                    teamDescription: response.data.groupDescription,\r\n                    teamLink: response.data.groupLink\r\n                });\r\n            }\r\n\r\n            if (this.state.isFrequencyTypeMonthly) {\r\n                this.setState({\r\n                    frequency: this.localize(\"EveryMonth\")\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    frequency: this.localize(\"EveryWeek\")\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Submit new employee resource details\r\n    */\r\n    private handleSubmit = () => {\r\n        if (this.checkIfSubmitAllowed()) {\r\n            this.setState({ submitLoading: true });\r\n            let groupDetails: ResourceGroupResponse = {\r\n                groupId: this.state.groupId,\r\n                groupType: this.state.groupType,\r\n                groupName: this.state.groupType === this.localize(\"External\") ? this.state.groupName : this.state.teamName,\r\n                groupDescription: this.state.groupType === this.localize(\"External\") ? this.state.groupDescription : this.state.teamDescription,\r\n                groupLink: this.state.groupType === this.localize(\"External\") ? this.state.groupLink : this.state.teamLink,\r\n                imageLink: this.state.imageLink,\r\n                location: this.state.location,\r\n                includeInSearchResults: this.state.searchEnabled,\r\n                tags: JSON.stringify(this.state.tagsList),\r\n                isProfileMatchingEnabled: this.state.isProfileMatchingEnabled,\r\n                matchingFrequency: this.state.isFrequencyTypeMonthly ? MatchingFrequencyType.monthly : MatchingFrequencyType.weekly,\r\n            }\r\n\r\n            // Post group details\r\n            this.updateEmployeeResourceGroup(groupDetails);\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Create new group from API\r\n    */\r\n    private async updateEmployeeResourceGroup(groupDetails: any) {\r\n        let response = await updateEmployeeResourceGroup(this.state.groupId, groupDetails);\r\n\r\n        if (response.status === 400 && !response.data) {\r\n            this.setState({ submitLoading: false, errorMessage: this.localize(\"GroupAlreadyExists\") });\r\n        }\r\n        else if (response.status === 200 && response.data) {\r\n            this.setState({ submitLoading: false, errorMessage: \"\" });\r\n            groupDetails.includeInSearchResults = this.state.searchEnabled;\r\n            microsoftTeams.tasks.submitTask();\r\n        }\r\n        else {\r\n            //TODO: will be displaying generic error message while integrating the code with discover ERG page. \r\n        }\r\n    }\r\n\r\n    /**\r\n    *Validate input parameters\r\n    */\r\n    private checkIfSubmitAllowed = () => {\r\n        if (this.isNullorWhiteSpace(this.state.groupType)) {\r\n            this.setState({ isGroupTypePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType === GroupType.external && this.isNullorWhiteSpace(this.state.groupName)) {\r\n            this.setState({ isGroupNamePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType === GroupType.external && this.isNullorWhiteSpace(this.state.groupDescription)) {\r\n            this.setState({ isGroupDescriptionPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType == GroupType.external && this.isNullorWhiteSpace(this.state.groupLink)) {\r\n            this.setState({ isGroupLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType === GroupType.teams && this.isNullorWhiteSpace(this.state.teamLink)) {\r\n            this.setState({ isTeamLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType === GroupType.teams && this.isNullorWhiteSpace(this.state.teamName)) {\r\n            this.setState({ isTeamNamePresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.state.groupType === GroupType.teams && this.isNullorWhiteSpace(this.state.teamDescription)) {\r\n            this.setState({ isTeamDescriptionPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.isNullorWhiteSpace(this.state.imageLink)) {\r\n            this.setState({ isImageLinkPresent: false });\r\n            return false;\r\n        }\r\n\r\n        if (this.isNullorWhiteSpace(this.state.location)) {\r\n            this.setState({ isLocationPresent: false });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *Checks for null or white space\r\n    */\r\n    private isNullorWhiteSpace = (input: string): boolean => {\r\n        return !input || !input.trim();\r\n    }\r\n\r\n    /**\r\n\t*Check if tag is valid\r\n\t*/\r\n    private checkIfTagIsValid = () => {\r\n        let validationParams: ITagValidationParameters = { isEmpty: false, isLengthValid: true, isExisting: false, isTagsCountValid: false, containsSemicolon: false };\r\n        if (this.state.tag.trim() === \"\") {\r\n            validationParams.isEmpty = true;\r\n        }\r\n\r\n        if (this.state.tag.length > Constants.stateTagMaxLength) {\r\n            validationParams.isLengthValid = false;\r\n        }\r\n\r\n        let tags = this.state.tagsList;\r\n        let isTagExist = tags.find((tag: string) => {\r\n            if (tag.toLowerCase() === this.state.tag.toLowerCase()) {\r\n                return tag;\r\n            }\r\n        });\r\n\r\n        if (this.state.tag.split(\";\").length > 1) {\r\n            validationParams.containsSemicolon = true;\r\n        }\r\n\r\n        if (isTagExist) {\r\n            validationParams.isExisting = true;\r\n        }\r\n\r\n        if (this.state.tagsList.length < Constants.stateTagMaxCount) {\r\n            validationParams.isTagsCountValid = true;\r\n        }\r\n\r\n        this.setState({ tagValidation: validationParams });\r\n\r\n        if (!validationParams.isEmpty && !validationParams.isExisting && validationParams.isLengthValid && validationParams.isTagsCountValid && !validationParams.containsSemicolon) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n   *Sets state of tagsList by removing tag using its index.\r\n   *@param index Index of tag to be deleted.\r\n   */\r\n    private onTagRemoveClick = (index: number) => {\r\n        let tags = this.state.tagsList.filter((val, i) => i !== index)\r\n        this.setState({\r\n            tagsList: tags\r\n        });\r\n    }\r\n\r\n    /**\r\n    *Returns text component containing error message for empty tag input field\r\n    */\r\n    private getTagError = () => {\r\n        if (this.state.tagValidation.isEmpty) {\r\n            return (<Text content={this.localize(\"EmptyTagError\")} error size=\"small\" />);\r\n        }\r\n        else if (!this.state.tagValidation.isLengthValid) {\r\n            return (<Text content={this.localize(\"TagLengthError\")} error size=\"small\" />);\r\n        }\r\n        else if (this.state.tagValidation.isExisting) {\r\n            return (<Text content={this.localize(\"SameTagExistsError\")} error size=\"small\" />);\r\n        }\r\n        else if (!this.state.tagValidation.isTagsCountValid) {\r\n            return (<Text content={this.localize(\"TagsCountError\")} error size=\"small\" />);\r\n        }\r\n        else if (this.state.tagValidation.containsSemicolon) {\r\n            return (<Text content={this.localize(\"SemicolonTagError\")} error size=\"small\" />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n\t*Sets state of tagsList by adding new tag.\r\n\t*/\r\n    private onTagAddClick = () => {\r\n        if (this.checkIfTagIsValid()) {\r\n            let tags = [...this.state.tagsList, this.state.tag];\r\n            this.setState({\r\n                tagsList: tags,\r\n                tag: \"\"\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t* Adds tag when enter key is pressed\r\n\t* @param event Object containing event details\r\n\t*/\r\n    private onTagKeyUp = (event: any) => {\r\n        if (event.key === 'Enter') {\r\n            this.onTagAddClick();\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t*Sets tag state.\r\n\t*@param tag Tag string\r\n\t*/\r\n    private onTagChange = (tag: string) => {\r\n        this.setState({ tag: tag })\r\n    }\r\n\r\n    /**\r\n    *Sets group type state.\r\n    *@param groupType groupType string\r\n    */\r\n    private onGroupTypeChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value === this.localize(\"Teams\")) {\r\n            this.setState({ groupType: itemsData.value, isGroupTypePresent: true, isTeamsSelected: true, isExternalSelected: false });\r\n        }\r\n        else {\r\n            this.setState({ groupType: itemsData.value, isGroupTypePresent: true, isExternalSelected: true, isTeamsSelected: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Sets group type state.\r\n    *@param groupType groupType string\r\n    */\r\n    private onFrequencyTypeChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value === this.localize(\"EveryWeek\")) {\r\n            this.setState({ isFrequencyTypeMonthly: false, frequency: this.localize(\"EveryWeek\") });\r\n        }\r\n        else {\r\n            this.setState({ isFrequencyTypeMonthly: true, frequency: this.localize(\"EveryMonth\") });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets group name state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onGroupNameChange = (value: string) => {\r\n        this.setState({ groupName: value, isGroupNamePresent: true });\r\n    }\r\n\r\n    /**\r\n   *Sets group description state.\r\n   *@param description Description string\r\n   */\r\n    private onGroupDescriptionChange = (description: string) => {\r\n        this.setState({ groupDescription: description, isGroupDescriptionPresent: true });\r\n    }\r\n\r\n    /**\r\n    *Sets group link state.\r\n    *@param event object\r\n    */\r\n    private onGroupLinkChange = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\")))) {\r\n            this.setState({\r\n                isGroupLinkValid: false, isGroupLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                groupLink: event.target.value, isGroupLinkValid: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets team name state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onTeamNameChange = (value: string) => {\r\n        this.setState({ teamName: value, isTeamNamePresent: true });\r\n    }\r\n\r\n    /**\r\n   *Sets team description state.\r\n   *@param description Description string\r\n   */\r\n    private onTeamDescriptionChange = (description: string) => {\r\n        this.setState({ teamDescription: description, isTeamDescriptionPresent: true });\r\n    }\r\n\r\n    /**\r\n    *Sets team link state.\r\n    *@param event object\r\n    */\r\n    private onTeamLinkChange = async (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://teams.microsoft.com/l/team\")))) {\r\n            this.setState({\r\n                isTeamLinkValid: false, isTeamLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                teamLink: event.target.value, isTeamLinkValid: true\r\n            });\r\n\r\n            // Get groupId from team link\r\n            var params = url.split(\"?\")[1];\r\n            let groupId = params.split(\"&\")[0];\r\n            let response = await getTeamDetails(groupId.split(\"=\")[1]);\r\n            if (response.status === 200 && response.data) {\r\n                this.setState({\r\n                    teamName: response.data.teamDisplayName, teamDescription: response.data.teamDescription\r\n                });\r\n            }\r\n            else if (response.status === 204) {\r\n                this.setState({\r\n                    errorMessage: this.localize('TeamNotExists')\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Sets image link state.\r\n    *@param event object\r\n    */\r\n    private onImageLinkChange = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\") || (url.startsWith(\"data:image/png;base64,\")) || (url.startsWith(\"data:image/jpeg;base64,\")) || (url.startsWith(\"data:image/gif;base64,\"))))) {\r\n            this.setState({\r\n                isImageLinkValid: false, isImageLinkPresent: true\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                imageLink: event.target.value, isImageLinkValid: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n\t*Sets location state.\r\n\t*@param title Title string\r\n\t*/\r\n    private onLocationChange = (value: string) => {\r\n        this.setState({ location: value, isLocationPresent: true });\r\n    }\r\n\r\n    /**\r\n     * Handling check box change event.\r\n     * @param isChecked | boolean value.\r\n     */\r\n    private onSearchEnableChange = (isChecked: boolean): void => {\r\n        this.setState({ searchEnabled: !isChecked });\r\n    }\r\n\r\n    /**\r\n     * Handling check box change event.\r\n     * @param isChecked | boolean value.\r\n     */\r\n    private onProfileMatchEnableChange = (isChecked: boolean): void => {\r\n        this.setState({ isProfileMatchingEnabled: !isChecked });\r\n    }\r\n\r\n    /**\r\n   *Returns text component containing error message for failed name field validation\r\n   *@param {boolean} isValuePresent Indicates whether value is present\r\n   */\r\n    private getRequiredFieldError = (isValuePresent: boolean) => {\r\n        if (!isValuePresent) {\r\n            return (<Text data-testid=\"empty_validation\" content={this.localize('RequiredFieldMessage')} error size=\"small\" />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n   *Returns text component containing error message for failed name field validation\r\n   *@param {boolean} isValuePresent Indicates whether value is present\r\n   */\r\n    private getInvalidUrlError = (isValuePresent: boolean) => {\r\n        if (!isValuePresent) {\r\n            return (<Text data-testid=\"url_validation\" content={this.localize('InvalidUrlMessage')} error size=\"small\" />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n    */\r\n    public render(): JSX.Element {\r\n        if (!this.state.loading) {\r\n            return (\r\n                <div className={this.state.theme === \"default\" ? \"backgroundcolor\" : \"\"} >\r\n                    <Flex className=\"tab-container\" column>\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"group_type_field\" size=\"small\" content={this.localize(\"GroupType\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isGroupTypePresent)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Dropdown\r\n                            className=\"between-space\"\r\n                            fluid\r\n                            placeholder={this.localize(\"GroupTypePlaceHolder\")}\r\n                            items={[\r\n                                this.localize(\"External\"),\r\n                                this.localize(\"Teams\"),\r\n                            ]}\r\n                            value={this.state.groupType}\r\n                            onChange={this.onGroupTypeChange}\r\n                            data-testid=\"group_type_dropdown\"\r\n                        />\r\n                        {this.state.isExternalSelected && <div>\r\n                            < Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_name_field\" size=\"small\" content={this.localize(\"GroupName\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupNamePresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthName}\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupNamePlaceHolder\")}\r\n                                value={this.state.groupName}\r\n                                onChange={(event: any) => this.onGroupNameChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_description_field\" size=\"small\" content={this.localize(\"GroupDescription\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupDescriptionPresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthDescription}\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupDescriptionPlaceHolder\")}\r\n                                value={this.state.groupDescription}\r\n                                onChange={(event: any) => this.onGroupDescriptionChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"group_link_field\" size=\"small\" content={this.localize(\"GroupLink\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isGroupLinkPresent)}\r\n                                </Flex.Item>\r\n                                <Flex.Item push>\r\n                                    {this.getInvalidUrlError(this.state.isGroupLinkValid)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                fluid\r\n                                placeholder={this.localize(\"GroupLinkPlaceHolder\")}\r\n                                value={this.state.groupLink}\r\n                                onChange={this.onGroupLinkChange}\r\n                            />\r\n                        </div>}\r\n                        {this.state.isTeamsSelected && <div>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_link_field\" size=\"small\" content={this.localize(\"TeamLink\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamLinkPresent)}\r\n                                </Flex.Item>\r\n                                <Flex.Item push>\r\n                                    {this.getInvalidUrlError(this.state.isTeamLinkValid)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamLinkPlaceHolder\")}\r\n                                value={this.state.teamLink}\r\n                                onChange={this.onTeamLinkChange}\r\n                            />\r\n                            < Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_name_field\" size=\"small\" content={this.localize(\"TeamName\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamNamePresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthName}\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamNamePlaceHolder\")}\r\n                                value={this.state.teamName}\r\n                                onChange={(event: any) => this.onTeamNameChange(event.target.value)}\r\n                            />\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"team_description_field\" size=\"small\" content={this.localize(\"TeamDescription\")} />\r\n                                <Flex.Item push>\r\n                                    {this.getRequiredFieldError(this.state.isTeamDescriptionPresent)}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthDescription}\r\n                                fluid\r\n                                placeholder={this.localize(\"TeamDescriptionPlaceHolder\")}\r\n                                value={this.state.teamDescription}\r\n                                onChange={(event: any) => this.onTeamDescriptionChange(event.target.value)}\r\n                            />\r\n                        </div>}\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"image_link_field\" size=\"small\" content={this.localize(\"ImageLink\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isImageLinkPresent)}\r\n                            </Flex.Item>\r\n                            <Flex.Item push>\r\n                                {this.getInvalidUrlError(this.state.isImageLinkValid)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Input\r\n                            className=\"between-space\"\r\n                            fluid\r\n                            placeholder={this.localize(\"ImageLinkPlaceHolder\")}\r\n                            value={this.state.imageLink}\r\n                            onChange={this.onImageLinkChange}\r\n                            data-testid=\"image_url\"\r\n                        />\r\n                        <div>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"tags_field\" size=\"small\" content={this.localize(\"Tags\")} />\r\n                                <Flex.Item push>\r\n                                    <div>\r\n                                        {this.getTagError()}\r\n                                    </div>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                placeholder={this.localize(\"TagsPlaceHolder\")}\r\n                                fluid\r\n                                value={this.state.tag}\r\n                                onKeyDown={this.onTagKeyUp}\r\n                                onChange={(event: any) => this.onTagChange(event.target.value)}\r\n                            />\r\n                            <Flex>\r\n                                <div>\r\n                                    {\r\n                                        this.state.tagsList.map((value: string, index) => {\r\n                                            if (value.trim().length > 0) {\r\n                                                return (\r\n                                                    <Label\r\n                                                        circular\r\n                                                        className={this.state.theme === \"default\" ? \"tags-label-wrapper\" : \"tags-label-wrapper-dark\"}\r\n                                                        content={<Text content={value.trim()} title={value.trim()} size=\"medium\" />}\r\n                                                        icon={<CloseIcon outline key={index} onClick={() => this.onTagRemoveClick(index)} />}\r\n                                                    />\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </Flex>\r\n                        </div>\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"location_field\" size=\"small\" content={this.localize(\"Location\")} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isLocationPresent)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Input\r\n                            className=\"between-space\"\r\n                            maxLength={Constants.stateLocationMaxLength}\r\n                            fluid\r\n                            placeholder={this.localize(\"LocationPlaceHolder\")}\r\n                            value={this.state.location}\r\n                            onChange={(event: any) => this.onLocationChange(event.target.value)}\r\n                        />\r\n                        <Flex className=\"top-padding\">\r\n                            <Text data-testid=\"searchenabled_field\" className=\"margin-space\" content={this.localize(\"SearchEnabled\")} />\r\n                            <InfoIcon outline xSpacing=\"after\" title={this.localize(\"TagInfo\")} size=\"small\" />\r\n                            <Checkbox toggle checked={this.state.searchEnabled} onChange={() => this.onSearchEnableChange(this.state.searchEnabled)} />\r\n                        </Flex>\r\n                        {this.state.groupType === GroupType.teams && <>< Flex className=\"top-padding\">\r\n                            <Text data-testid=\"searchenabled_field\" className=\"margin-space\" content={this.localize(\"ProfileMatching\")} />\r\n                            <InfoIcon outline xSpacing=\"after\" title={this.localize(\"TagInfo\")} size=\"small\" />\r\n                            <Checkbox toggle checked={this.state.isProfileMatchingEnabled} onChange={() => this.onProfileMatchEnableChange(this.state.isProfileMatchingEnabled)} />\r\n                        </Flex>\r\n                            <Flex className=\"top-padding\">\r\n                                <Text data-testid=\"searchenabled_field\" className=\"margin-space\" content={this.localize(\"MatchFrequency\")} />\r\n                                <Dropdown aria-readonly={true} disabled={!this.state.isProfileMatchingEnabled}\r\n                                    items={[\r\n                                        this.localize(\"EveryWeek\"),\r\n                                        this.localize(\"EveryMonth\"),\r\n                                    ]}\r\n                                    value={this.state.frequency}\r\n                                    onChange={this.onFrequencyTypeChange}\r\n                                    fluid\r\n                                />\r\n                            </Flex>\r\n                        </>}\r\n                    </Flex>\r\n\r\n                    <Flex className=\"tab-footer\" hAlign=\"end\" >\r\n                        <Flex.Item push>\r\n                            <Text className=\"error-info\" content={this.state.errorMessage} error size=\"medium\" />\r\n                        </Flex.Item>\r\n                        <Button primary content={this.localize(\"SubmitText\")}\r\n                            onClick={this.handleSubmit}\r\n                            disabled={this.state.submitLoading}\r\n                            loading={this.state.submitLoading} data-testid=\"submit_button\" />\r\n                    </Flex>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return <Loader />\r\n        }\r\n    }\r\n}\r\n\r\nexport default withTranslation()(UpdateResouceGroup)","// <copyright file=\"knowledgeBaseSettingsApi.ts\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport axios from './axiosJWTDecorator';\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nlet baseAxiosUrl = getBaseUrl() + '/api';\r\n\r\n/**\r\n* GET knowledge base id\r\n*/\r\nexport const getKnowledgeBaseId = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/knowledgebase\";\r\n    return await axios.get(url, false);\r\n}\r\n\r\n/**\r\n* PATCH update knowledge base id\r\n*/\r\nexport const updateKnowledgeBaseId = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/knowledgebase\";\r\n    return await axios.patch(url, payload);\r\n}","// <copyright file=\"updateKnowledgeBaseId.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { TFunction } from 'i18next';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Flex, Text, Input, Button, Loader } from '@fluentui/react-northstar';\r\nimport { getKnowledgeBaseId, updateKnowledgeBaseId } from \"../../apis/knowledgeBaseSettingsApi\";\r\nimport Constants from '../../constants/constants';\r\nimport './configurationTab.scss';\r\n\r\nexport interface IUpdateKnowledgeBaseState {\r\n    loading: boolean,\r\n    theme: string;\r\n    knowledgeBaseId: string;\r\n    isKnowledgeBaseIdPresent: boolean;\r\n    submitLoading: boolean;\r\n}\r\n\r\nexport interface UpdateKnowledgeBaseProps extends RouteComponentProps, WithTranslation {\r\n}\r\n\r\nclass UpdateKnowledgeBase extends React.Component<UpdateKnowledgeBaseProps, IUpdateKnowledgeBaseState> {\r\n    readonly localize: TFunction;\r\n\r\n    constructor(props: UpdateKnowledgeBaseProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            loading: true,\r\n            theme:\"\",\r\n            knowledgeBaseId: \"\",\r\n            isKnowledgeBaseIdPresent: true,\r\n            submitLoading: false,\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.setState({\r\n                theme: context.theme!,\r\n            });\r\n        });\r\n\r\n        await this.getKnowledgeBaseDetails();\r\n    }\r\n\r\n    /**\r\n    * Method to get knowledge base details.\r\n    */\r\n    private getKnowledgeBaseDetails = async () => {\r\n        try {\r\n            const response = await getKnowledgeBaseId();\r\n            if (response.status === 200 && response.data) {\r\n                this.setState({\r\n                    knowledgeBaseId: response.data,\r\n                    loading: false,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            // Knowledge base id will be empty for first run experience. Handling 404 error to provide input from user.\r\n            if (error.response.status === 404) {\r\n                this.setState({ loading: false });\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *Submit knowledge base details\r\n    */\r\n    private handleSubmit = async () => {\r\n        if (!this.state.knowledgeBaseId) {\r\n            this.setState({ isKnowledgeBaseIdPresent: false});\r\n            return;\r\n        }\r\n\r\n        this.setState({ submitLoading: true });\r\n        let knowledgeBaseData: object = { id: this.state.knowledgeBaseId };\r\n        await updateKnowledgeBaseId(knowledgeBaseData);\r\n        microsoftTeams.tasks.submitTask();\r\n    }\r\n\r\n    /**\r\n\t*Sets knowledge base id state.\r\n\t*@param value Knowledge base id string\r\n\t*/\r\n    private onKnowledgeBaseInputChange = (value: string) => {\r\n        this.setState({ knowledgeBaseId: value, isKnowledgeBaseIdPresent: true });\r\n    }\r\n\r\n    /**\r\n    *Returns text component containing error message for failed name field validation\r\n    *@param {boolean} isValuePresent Indicates whether value is present\r\n    */\r\n    private getRequiredFieldError = (isValuePresent: boolean) => {\r\n        if (!isValuePresent) {\r\n            return (<Text content={this.localize('RequiredFieldMessage')} error size=\"small\" />);\r\n        }\r\n\r\n        return (<></>);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (!this.state.loading) {\r\n            return (\r\n                <div className={this.state.theme === \"default\" ? \"backgroundcolor\" : \"\"} >\r\n                    <Flex className=\"module-container\" column>\r\n                        <Flex className=\"top-padding\">\r\n                            <Text size=\"small\" content={this.localize('QnAMakerTitleText')} />\r\n                            <Flex.Item push>\r\n                                {this.getRequiredFieldError(this.state.isKnowledgeBaseIdPresent)}\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <Flex>\r\n                            <Input\r\n                                className=\"between-space\"\r\n                                maxLength={Constants.maxLengthKnowledgeBaseId}\r\n                                fluid\r\n                                value={this.state.knowledgeBaseId}\r\n                                placeholder={this.localize('QnAMakerInputPlaceHolderText')}\r\n                                onChange={(event: any) => this.onKnowledgeBaseInputChange(event.target.value)}\r\n                            />\r\n                        </Flex>\r\n                        <Flex.Item push>\r\n                            <Flex className=\"knowledge-base-footer\" hAlign=\"end\" >\r\n                                <Button primary content={this.localize(\"SaveText\")}\r\n                                    onClick={this.handleSubmit} disabled={this.state.submitLoading}\r\n                                    loading={this.state.submitLoading} />\r\n                            </Flex>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return <Loader />\r\n        }\r\n    }\r\n}\r\n\r\nconst updateKnowledgeBaseWithTranslation = withTranslation()(UpdateKnowledgeBase);\r\nexport default updateKnowledgeBaseWithTranslation;","// <copyright file=\"App.tsx\" company=\"Microsoft\">\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// </copyright>\r\n\r\nimport React, { Suspense } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Configuration from './components/config';\r\nimport TabContainer from './components/TabContainer/tabContainer';\r\nimport NewMessage from './components/NewMessage/newMessage';\r\nimport StatusTaskModule from './components/StatusTaskModule/statusTaskModule';\r\nimport './App.scss';\r\nimport { Provider, themes } from '@fluentui/react-northstar';\r\nimport SendConfirmationTaskModule from './components/SendConfirmationTaskModule/sendConfirmationTaskModule';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { TeamsThemeContext, getContext, ThemeStyle } from 'msteams-ui-components-react';\r\nimport ErrorPage from \"./components/ErrorPage/errorPage\";\r\nimport SignInPage from \"./components/SignInPage/signInPage\";\r\nimport SignInSimpleStart from \"./components/SignInPage/signInSimpleStart\";\r\nimport ConfigurationTab from \"./components/ConfigurationTab/configurationTab\";\r\nimport SignInSimpleEnd from \"./components/SignInPage/signInSimpleEnd\";\r\nimport DiscoverResourceGroups from \"./components/JoinResourceGroup/discoverResourceGroups\";\r\nimport { updateLocale } from './i18n';\r\nimport CreateNewGroup from './components/EmployeeResourceGroup/createNewGroup';\r\nimport UpdateResourceGroup from './components/EmployeeResourceGroup/updateResouceGroup';\r\nimport updateKnowledgeBase from './components/ConfigurationTab/updateKnowledgeBaseId';\r\n\r\nexport interface IAppState {\r\n    theme: string;\r\n    themeStyle: number;\r\n}\r\n\r\nclass App extends React.Component<{}, IAppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            theme: \"\",\r\n            themeStyle: ThemeStyle.Light,\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            let theme = context.theme || \"\";\r\n            this.updateTheme(theme);\r\n            this.setState({\r\n                theme: theme\r\n            });\r\n        });\r\n\r\n        microsoftTeams.registerOnThemeChangeHandler((theme) => {\r\n            this.updateTheme(theme);\r\n            this.setState({\r\n                theme: theme,\r\n            }, () => {\r\n                this.forceUpdate();\r\n            });\r\n        });\r\n\r\n        updateLocale();\r\n    }\r\n\r\n    public setThemeComponent = () => {\r\n        if (this.state.theme === \"dark\") {\r\n            return (\r\n                <Provider theme={themes.teamsDark}>\r\n                    <div className=\"darkContainer\">\r\n                        {this.getAppDom()}\r\n                    </div>\r\n                </Provider>\r\n            );\r\n        }\r\n        else if (this.state.theme === \"contrast\") {\r\n            return (\r\n                <Provider theme={themes.teamsHighContrast}>\r\n                    <div className=\"highContrastContainer\">\r\n                        {this.getAppDom()}\r\n                    </div>\r\n                </Provider>\r\n            );\r\n        } else {\r\n            return (\r\n                <Provider theme={themes.teams}>\r\n                    <div className=\"defaultContainer\">\r\n                        {this.getAppDom()}\r\n                    </div>\r\n                </Provider>\r\n            );\r\n        }\r\n    }\r\n\r\n    private updateTheme = (theme: string) => {\r\n        if (theme === \"dark\") {\r\n            this.setState({\r\n                themeStyle: ThemeStyle.Dark\r\n            });\r\n        } else if (theme === \"contrast\") {\r\n            this.setState({\r\n                themeStyle: ThemeStyle.HighContrast\r\n            });\r\n        } else {\r\n            this.setState({\r\n                themeStyle: ThemeStyle.Light\r\n            });\r\n        }\r\n    }\r\n\r\n    public getAppDom = () => {\r\n        const context = getContext({\r\n            baseFontSize: 10,\r\n            style: this.state.themeStyle\r\n        });\r\n        return (\r\n            <TeamsThemeContext.Provider value={context}>\r\n                <Suspense fallback={<div></div>}>\r\n                    <div className=\"appContainer\">\r\n                        <BrowserRouter>\r\n                            <Switch>\r\n                                <Route exact path=\"/configtab\" component={Configuration} />\r\n                                <Route exact path=\"/messages\" component={TabContainer} />\r\n                                <Route exact path=\"/createNewGroup\" component={CreateNewGroup} />\r\n                                <Route exact path=\"/discover\" component={DiscoverResourceGroups} />\r\n                                <Route exact path=\"/newmessage\" component={NewMessage} />\r\n                                <Route exact path=\"/newmessage/:id\" component={NewMessage} />\r\n                                <Route exact path=\"/viewstatus/:id\" component={StatusTaskModule} />\r\n                                <Route exact path=\"/sendconfirmation/:id\" component={SendConfirmationTaskModule} />\r\n                                <Route exact path=\"/errorpage\" component={ErrorPage} />\r\n                                <Route exact path=\"/errorpage/:id\" component={ErrorPage} />\r\n                                <Route exact path=\"/signin\" component={SignInPage} />\r\n                                <Route exact path=\"/signin-simple-start\" component={SignInSimpleStart} />\r\n                                <Route exact path=\"/signin-simple-end\" component={SignInSimpleEnd} />\r\n                                <Route exact path=\"/configurationTab\" component={ConfigurationTab} />\r\n                                <Route exact path=\"/updateerg/:id\" component={UpdateResourceGroup} />\r\n                                <Route exact path=\"/updateKnowledgeBaseId\" component={updateKnowledgeBase} />\r\n                            </Switch>\r\n                        </BrowserRouter>\r\n                    </div>\r\n                </Suspense>\r\n            </TeamsThemeContext.Provider>\r\n        );\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {this.setThemeComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nexport const selectedMessageReducer = (selectedMessage = null, action: { type: string; payload: any; }) => {\r\n    if (action.type === 'MESSAGE_SELECTED') {\r\n        return action.payload;\r\n    }\r\n    return selectedMessage;\r\n}\r\n\r\nexport const messagesListReducer = (messages = [], action: { type: string; payload: any; }) => {\r\n    if (action.type === 'FETCH_MESSAGES') {\r\n        return action.payload\r\n    }\r\n    return messages;\r\n};\r\n\r\nexport const draftmessagesListReducer = (draftMessages = [], action: { type: string; payload: any; }) => {\r\n    if (action.type === 'FETCH_DRAFTMESSAGES') {\r\n        return action.payload\r\n    }\r\n    return draftMessages;\r\n};\r\n\r\nexport default combineReducers({\r\n    messagesList: messagesListReducer,\r\n    draftMessagesList: draftmessagesListReducer,\r\n    selectedMessage: selectedMessageReducer,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}